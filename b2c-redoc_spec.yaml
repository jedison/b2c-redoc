openapi: 3.0.1
info:
  title: B2C Documentation
  version: v2
  contact:
    name: API Support
    email: supportapi@crscreditapi.com

  description: |
      <span class="docs-time">Last updated: 2022-03-03</span></h1>
      <p>This guide is to assist you in integrating the Consumer Credit API into your environment.</p>

  x-logo:
    url: 'https://gist.githubusercontent.com/jedisonbru/f8eb1437878b3047591a505b22d6ff58/raw/2a85cd4b5dff25086d47041f4259270c7837100d/crs_b2c.svg'
    altText: CRS logo
    href: /

servers:
  - url: https://efx-dev.stitchcredit.com/api
    description: Development Server URL

paths:
  /customers/users:
    get:
      tags:
        - customer-controller
      operationId: searchCustomerUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - customer-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUserReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts:
    get:
      tags:
        - customer-controller
      operationId: getCustomerHosts
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedHostEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - customer-controller
      operationId: updateCustomerHost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerHostReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerHostRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin:
    put:
      tags:
        - admin-controller
      operationId: updateAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - admin-controller
      operationId: createAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users:
    get:
      tags:
        - admin-controller
      operationId: searchUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - admin-controller
      operationId: updateUser_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts:
    put:
      tags:
        - admin-controller
      operationId: updateCustomerHost_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCustomerHostReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminCustomerHostRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - admin-controller
      operationId: createCustomerHost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCustomerHostReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminCustomerHostRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers:
    get:
      tags:
        - admin-controller
      operationId: getCustomers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - admin-controller
      operationId: updateCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCustomerReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - admin-controller
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCustomerReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/verify-quiz:
    post:
      tags:
        - user-controller
      operationId: verifyIdentityQuiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityQuizReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/verify-code:
    post:
      tags:
        - user-controller
      operationId: verifyMobileCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOtpReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/send-code/{token}:
    post:
      tags:
        - user-controller
      operationId: sendMobileCode
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserOtpRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/renew-code:
    post:
      tags:
        - user-controller
      operationId: renewMobileCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRenewOtpReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserOtpRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/register:
    post:
      tags:
        - user-controller
      operationId: registerUser
      parameters:
        - name: referer
          in: header
          required: false
          schema:
            type: string
        - name: ctoken
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/recovery-token:
    post:
      tags:
        - user-controller
      operationId: recoveryQuestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionTokenRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/password-reset:
    post:
      tags:
        - user-controller
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/password-recovery:
    post:
      tags:
        - user-controller
      operationId: recoverPassword
      parameters:
        - name: referer
          in: header
          required: false
          schema:
            type: string
        - name: ctoken
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/login:
    post:
      tags:
        - user-controller
      operationId: loginUser
      parameters:
        - name: referer
          in: header
          required: false
          schema:
            type: string
        - name: ctoken
          in: header
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/identity:
    post:
      tags:
        - user-controller
      operationId: setIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/close-account:
    post:
      tags:
        - user-controller
      operationId: closeUserAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseAccountReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/change-recovery:
    post:
      tags:
        - user-controller
      operationId: changeRecovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRecoveryReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/change-password:
    post:
      tags:
        - user-controller
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/change-notifications:
    post:
      tags:
        - user-controller
      operationId: changeNotifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationsPref'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /users/change-email:
    post:
      tags:
        - user-controller
      operationId: changeUserEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/action-token:
    post:
      tags:
        - user-controller
      operationId: getActionToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionTokenRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /test/webhook/sink:
    post:
      tags:
        - test-controller
      operationId: webhookSink
      parameters:
        - name: fail
          in: query
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /test/webhook/send/{id}:
    post:
      tags:
        - test-controller
      operationId: webhookTest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACCNEW
              - IDFAIL
              - IDSVCOUT
              - ACCREG
              - ACCREGFAIL
              - ACCCLOSED
              - ACCLOCKED
              - ACCLOGINFAIL
              - ACCALERT
              - SCOREREF
              - REPORTREF
              - TEST
              - ERROR
        - name: error
          in: query
          required: false
          schema:
            type: string
            default: ''
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertReqDTO'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/view-data:
    post:
      tags:
        - rqueue-rest-controller
      operationId: viewData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateViewRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/queue-data:
    post:
      tags:
        - rqueue-rest-controller
      operationId: exploreQueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueExploreRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/pause-unpause-queue:
    post:
      tags:
        - rqueue-rest-controller
      operationId: pauseUnpauseQueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseUnpauseQueueRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/move-data:
    post:
      tags:
        - rqueue-rest-controller
      operationId: dataType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageMoveRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageMoveResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/delete-queue:
    post:
      tags:
        - rqueue-rest-controller
      operationId: deleteQueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataTypeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/delete-queue-part:
    post:
      tags:
        - rqueue-rest-controller
      operationId: deleteAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataDeleteRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BooleanResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/delete-message:
    post:
      tags:
        - rqueue-rest-controller
      operationId: deleteMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageDeleteRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BooleanResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/data-type:
    post:
      tags:
        - rqueue-rest-controller
      operationId: dataType_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataTypeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StringResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/chart:
    post:
      tags:
        - rqueue-rest-controller
      operationId: getDashboardData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartDataRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ChartDataResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /direct/user-reg:
    post:
      tags:
        - direct-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectUserRegReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreauthTokenDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/update-refresh/{id}:
    post:
      tags:
        - direct-controller
      operationId: updateRefresh
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: rmonly
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/register:
    post:
      tags:
        - direct-controller
      operationId: registerOld
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectUserRegReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Deprecated Method - use /user-reg
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /direct/login:
    post:
      tags:
        - direct-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectLoginReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /direct/close-account/{id}:
    post:
      tags:
        - direct-controller
      operationId: closeAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/change-mobile/{id}:
    post:
      tags:
        - direct-controller
      operationId: changeMobile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectChangeMobileReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/change-host/{id}:
    post:
      tags:
        - direct-controller
      operationId: changeHost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: host
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/change-email/{id}:
    post:
      tags:
        - direct-controller
      operationId: changeEmail
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectChangeEmailReqDTO'
        required: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /customers/users/{id}/unenroll:
    post:
      tags:
        - customer-controller
      operationId: unenrollUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/users/{id}/reset:
    post:
      tags:
        - customer-controller
      operationId: resetUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/users/{id}/repair:
    post:
      tags:
        - customer-controller
      operationId: repairUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/login:
    post:
      tags:
        - customer-controller
      operationId: login_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/close-account/{id}:
    post:
      tags:
        - customer-controller
      operationId: closeAccount_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /alerts:
    post:
      tags:
        - alert-controller
      operationId: newAlert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EfxAlertsReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EfxAlertsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /alerts/updates:
    post:
      tags:
        - alert-controller
      operationId: userUpdates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EFXFeatureUpdateDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /alerts/daily:
    post:
      tags:
        - alert-controller
      operationId: newAlerts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EFXDailyAlertDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/unenroll:
    post:
      tags:
        - admin-controller
      operationId: unenrollUser_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/reset:
    post:
      tags:
        - admin-controller
      operationId: resetUser_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/repair:
    post:
      tags:
        - admin-controller
      operationId: repairUser_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/login:
    post:
      tags:
        - admin-controller
      operationId: login_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReqDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/clear/cache:
    post:
      tags:
        - admin-controller
      operationId: clearCache
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users:
    get:
      tags:
        - user-controller
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/start:
    get:
      tags:
        - user-controller
      operationId: startUserSession
      parameters:
        - name: referer
          in: header
          required: false
          schema:
            type: string
        - name: key
          in: query
          required: false
          schema:
            type: string
        - name: ocf
          in: query
          required: false
          schema:
            type: string
        - name: oct
          in: query
          required: false
          schema:
            type: string
        - name: ocl
          in: query
          required: false
          schema:
            type: string
        - name: view
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RedirectView'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/refresh-token:
    get:
      tags:
        - user-controller
      operationId: refreshUserToken
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/preauth-token/{token}:
    get:
      tags:
        - user-controller
      operationId: exchangePreauthToken
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/initialize:
    get:
      tags:
        - user-controller
      operationId: initialize
      parameters:
        - name: referer
          in: header
          required: false
          schema:
            type: string
        - name: ctoken
          in: header
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserConfigDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/initialize/{key}:
    get:
      tags:
        - user-controller
      operationId: initializeWithKey
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserConfigDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /users/get-quiz:
    get:
      tags:
        - user-controller
      operationId: getIdentityQuiz
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdentityQuizDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/get-mobile:
    get:
      tags:
        - user-controller
      operationId: getMobileAuthorization
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdentityMobileRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-scores:
    get:
      tags:
        - user-controller
      operationId: getEfxScores
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditScoreAbstractScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /users/efx-score-history:
    get:
      tags:
        - user-controller
      operationId: getEfxScoreHistory
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditScoreHistoryScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-latest-scores:
    get:
      tags:
        - user-controller
      operationId: getEfxLatestScores
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditScoreScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-latest-report:
    get:
      tags:
        - user-controller
      operationId: efxLatestReport
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditReportReport'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-latest-report/summary:
    get:
      tags:
        - user-controller
      operationId: efxLatestReportSummary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditReportSummaryReport'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-latest-efx-score:
    get:
      tags:
        - user-controller
      operationId: getEfxLatestEFXScore
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditScoreScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /users/efx-config:
    get:
      tags:
        - user-controller
      operationId: getEfxConfig
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EfxConfigRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /users/efx-alerts:
    get:
      tags:
        - user-controller
      operationId: getEfxAlerts
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditMonitoringAlertAbstract'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /test/preauth-token/{id}:
    get:
      tags:
        - test-controller
      operationId: preauthToken
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreauthTokenDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /sys/version:
    get:
      tags:
        - system-controller
      operationId: version
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /sys/health:
    get:
      tags:
        - system-controller
      operationId: health
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/jobs:
    get:
      tags:
        - rqueue-rest-controller
      operationId: getJobs
      parameters:
        - name: message-id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataViewResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /rqueue/api/v1/aggregate-data-selector:
    get:
      tags:
        - rqueue-rest-controller
      operationId: aggregateDataCounter
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - DAILY
              - WEEKLY
              - MONTHLY
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DataSelectorResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /direct/user/{id}:
    get:
      tags:
        - direct-controller
      operationId: getUser_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/user-token/{id}:
    get:
      tags:
        - direct-controller
      operationId: userTokenOld
      parameters:
        - name: id
          in: path
          description: UserId to generate preauth token for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Deprecated Method - use /preauth-token/{id}
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /direct/refresh-token:
    get:
      tags:
        - direct-controller
      operationId: refreshToken
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /direct/preauth-token/{id}:
    get:
      tags:
        - direct-controller
      operationId: preauthToken_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PreauthTokenDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-scores/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxScores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditScoreAbstractScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /direct/efx-score-history/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxScoreHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditScoreHistoryScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-latest-scores/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxLatestScores
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditScoreScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-latest-report/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxLatestReport_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditReportReport'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-latest-report/{id}/summary:
    get:
      tags:
        - direct-controller
      operationId: efxLatestReportSummary_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditReportSummaryReport'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-latest-efx-score/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxLatestEFXScore
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreditScoreScore'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      deprecated: true
      security:
        - accessToken: []
  /direct/efx-config/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxConfig
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EfxConfigRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-alerts/{id}:
    get:
      tags:
        - direct-controller
      operationId: getEfxAlerts_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreditMonitoringAlertAbstract'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /direct/efx-alert/{id}:
    get:
      tags:
        - direct-controller
      operationId: efxAlert
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AlertRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /customers:
    get:
      tags:
        - customer-controller
      operationId: getCustomer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DetailedCustomerEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/users/{id}:
    get:
      tags:
        - customer-controller
      operationId: getUserAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - customer-controller
      operationId: removeUserAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CloseRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/users/{id}/logs:
    get:
      tags:
        - customer-controller
      operationId: userLogs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/stats:
    get:
      tags:
        - customer-controller
      operationId: getCustomerStatsByPeriod
      parameters:
        - name: period
          in: query
          required: false
          schema:
            maximum: 3
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: tz
          in: query
          required: false
          schema:
            type: string
            default: America/Los_Angeles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerStatsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/refresh-token:
    get:
      tags:
        - customer-controller
      operationId: refresh
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/postman/{id}:
    get:
      tags:
        - customer-controller
      operationId: getPostman
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: proto
          in: query
          required: true
          schema:
            type: string
        - name: hostname
          in: query
          required: true
          schema:
            type: string
        - name: port
          in: query
          required: true
          schema:
            type: string
        - name: base_url
          in: query
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: byte
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/{id}:
    get:
      tags:
        - customer-controller
      operationId: getCustomerHost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DetailedHostEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - customer-controller
      operationId: closeHost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: beforeDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CloseRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/{id}/users:
    get:
      tags:
        - customer-controller
      operationId: searchCustomerHostUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/{id}/stats:
    get:
      tags:
        - customer-controller
      operationId: getHostStatsByPeriod
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          required: false
          schema:
            maximum: 3
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: tz
          in: query
          required: false
          schema:
            type: string
            default: America/Los_Angeles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HostStatsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/{id}/billing:
    get:
      tags:
        - customer-controller
      operationId: getHostBilling
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/{id}/activeusers:
    get:
      tags:
        - customer-controller
      operationId: getActiveUsersByHost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/hosts/billing:
    get:
      tags:
        - customer-controller
      operationId: getCustomerHostsBilling
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/billing:
    get:
      tags:
        - customer-controller
      operationId: getCustomerBilling
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /customers/activeusers:
    get:
      tags:
        - customer-controller
      operationId: getActiveUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}:
    get:
      tags:
        - admin-controller
      operationId: getUser_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminUserRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - admin-controller
      operationId: closeUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CloseRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/logs:
    get:
      tags:
        - admin-controller
      operationId: userLogs_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/identity:
    get:
      tags:
        - admin-controller
      operationId: getUserIdentity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IdentityReqDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/features:
    get:
      tags:
        - admin-controller
      operationId: getUserFeatures
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EnrollmentFeatureResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/users/{id}/efx-config:
    get:
      tags:
        - admin-controller
      operationId: efxConfig_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EfxConfigRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
      security:
        - accessToken: []
  /admin/users/enrollment-failures:
    get:
      tags:
        - admin-controller
      operationId: getUserEnrollmentFailures
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/stats:
    get:
      tags:
        - admin-controller
      operationId: getUserStatsByPeriod
      parameters:
        - name: period
          in: query
          required: false
          schema:
            maximum: 3
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: tz
          in: query
          required: false
          schema:
            type: string
            default: America/Los_Angeles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserStatsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/refresh-token:
    get:
      tags:
        - admin-controller
      operationId: refresh_1
      parameters:
        - name: token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/postman/{id}:
    get:
      tags:
        - admin-controller
      operationId: getPostman_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: proto
          in: query
          required: true
          schema:
            type: string
        - name: hostname
          in: query
          required: true
          schema:
            type: string
        - name: port
          in: query
          required: true
          schema:
            type: string
        - name: base_url
          in: query
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: byte
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts/{id}:
    get:
      tags:
        - admin-controller
      operationId: getCustomerHost_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DetailedHostEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - admin-controller
      operationId: closeHost_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: beforeDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CloseRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts/{id}/users:
    get:
      tags:
        - admin-controller
      operationId: searchHostUsers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts/{id}/stats:
    get:
      tags:
        - admin-controller
      operationId: getHostStatsByPeriod_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          required: false
          schema:
            maximum: 3
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: tz
          in: query
          required: false
          schema:
            type: string
            default: America/Los_Angeles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HostStatsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts/{id}/billing:
    get:
      tags:
        - admin-controller
      operationId: getHostBilling_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/hosts/{id}/activeusers:
    get:
      tags:
        - admin-controller
      operationId: getActiveUsersByHost_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}:
    get:
      tags:
        - admin-controller
      operationId: getCustomer_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DetailedCustomerEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - admin-controller
      operationId: closeCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: beforeDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CloseRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/stats:
    get:
      tags:
        - admin-controller
      operationId: getCustomerStatsByPeriod_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: period
          in: query
          required: false
          schema:
            maximum: 3
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: tz
          in: query
          required: false
          schema:
            type: string
            default: America/Los_Angeles
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerStatsRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/hosts:
    get:
      tags:
        - admin-controller
      operationId: getCustomerHosts_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedHostEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/hosts/billing:
    get:
      tags:
        - admin-controller
      operationId: getCustomerHostsBilling_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/billing:
    get:
      tags:
        - admin-controller
      operationId: getCustomerBilling_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/activeusers:
    get:
      tags:
        - admin-controller
      operationId: getActiveUsersByCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/{id}/activeStats:
    get:
      tags:
        - admin-controller
      operationId: getCustomerActiveStats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveUserStatsEntry'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/customers/billing:
    get:
      tags:
        - admin-controller
      operationId: getCustomersBilling
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BillingRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/admins:
    get:
      tags:
        - admin-controller
      operationId: getAdmins
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/activeStats:
    get:
      tags:
        - admin-controller
      operationId: getActiveStats
      parameters:
        - name: page
          in: query
          required: false
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            minimum: 1
            type: integer
            format: int32
            default: 40
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageableResponse'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/:
    get:
      tags:
        - admin-controller
      operationId: getAdmin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /admin/{id}:
    get:
      tags:
        - admin-controller
      operationId: getAdmin_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AdminRespDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
  /error:
    get:
      tags:
        - error-controller
      operationId: handleError_2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - error-controller
      operationId: handleError_5
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - error-controller
      operationId: handleError_3
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - error-controller
      operationId: handleError_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    options:
      tags:
        - error-controller
      operationId: handleError_6
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    head:
      tags:
        - error-controller
      operationId: handleError_4
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object
    patch:
      tags:
        - error-controller
      operationId: handleError
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StitchErrorResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
        '409':
          description: Conflict
          content:
            '*/*':
              schema:
                type: object
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                type: object
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                type: object

#EFX
  '/{efx_url}/oauth/token':
    post:
      tags:
      - Equifax API
      - Getting Started - Create New User
      - Getting Started - Returning User
      summary: OAUTH Token
      operationId: OAUTHToken
      description: |
        <h2>/{efx_url}/oauth/token</h2>
        
        <p>For this path parameter, <strong>{efx_url}</strong>, use the url found in the response of a call to <strong>/users/efx-config</strong>.</p>
        <p>A successful request to <strong>{efx_url}/oauth/token</strong> will return credentials required for other <strong>Equifax API calls</strong>.</p>

      parameters:
      - in: path
        name: efx_url
        schema:
          type: string
          example: https://api.efx-url.com/consumer-data
        required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
              - scope
              - grant_type
              - api_key
              - client_assertion
              type: object
              properties:
                scope:
                  type: string
                  example: delivery
                grant_type:
                  type: string
                  example: jwt-bearer
                api_key:
                  type: string
                  example: '{{efx_api_key}}'
                client_assertion:
                  type: string
                  example: '{{efx_assertion}}'
        required: false
      responses:
        200:
          description: <p>The token in this response can be used to access the Equifax API</p>
          headers:
            Cache-Control:
              content:
                text/plain:
                  schema:
                    type: string
                  example: no-cache, no-store, max-age=0, must-revalidate, no-store
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 06 Aug 2015 13:31:36 GMT
            Expires:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 0
            Pragma:
              content:
                text/plain:
                  schema:
                    type: string
                  example: no-cache, no-cache
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Apache-Coyote/1.1
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/EFXresponse'
              example:
                access_token: 87e22d35-0089-4613-809b-62f248c2c978
                token_type: bearer
                expires_in: 610
                scope: read write
      deprecated: false
  '/{efx_url}/v1/creditMonitoring/healthcheck':
    get:
      tags:
      - Equifax API
      summary: Health Check
      operationId: HealthCheck
      description: |
        <h2>/{efx_url}/v1/creditMonitoring/healthcheck</h2>
      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          example: '{{content-type}}'
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditMonitoring':
    get:
      tags:
      - Equifax API
      summary: Credit Monitoring
      operationId: CreditMonitoring
      description: |
        <h2>/{efx_url}/v1/creditMonitoring</h2>

      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditReport':
    get:
      tags:
      - Equifax API
      summary: CreditReportList
      operationId: CreditReportList
      description: |
        <h2>/{efx_url}/v1/creditReport</h2>

      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditReport/{reportId}/summary':
    get:
      tags:
      - Equifax API
      summary: Credit Report Summary (First in list)
      operationId: CreditReportSummary(Firstinlist)
      description: |
        <h2>/{efx_url}/v1/creditReport/{reportId}/summary</h2>
      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      - name: reportId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditReport/{reportId}':
    get:
      tags:
      - Equifax API
      summary: Full Credit Report (First in list)
      operationId: FullCreditReport(Firstinlist)
      description: |
        <h2>/{efx_url}/v1/creditReport/{reportId}</h2>

      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      - name: reportId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditReport/{reportId}/print':
    get:
      tags:
      - Equifax API
      summary: Credit Report (First in list) - PRINT
      operationId: CreditReport(Firstinlist)-PRINT
      description: |
        <h2>/{efx_url}/v1/creditReport/{reportId}/print</h2>

      parameters:
      - name: access_token
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: '{{efxtoken}}'
      - name: reportId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditScore/latest':
    get:
      tags:
      - Equifax API
      summary: Credit Score Latest
      operationId: CreditScoreLatest
      description: |
        <h2>/{efx_url}/v1/creditScore/latest</h2>
      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  '/{efx_url}/v1/creditScore/history':
    get:
      tags:
      - Equifax API
      summary: Credit Score History
      operationId: CreditScoreHistory
      description: |
        <h2>/{efx_url}/v1/creditScore/history</h2>
      parameters:
      - name: historicalLimit
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 24
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false

components:
  schemas:
    StitchErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        codes:
          type: array
          items:
            type: string
        messages:
          type: array
          items:
            type: string
        details:
          type: array
          items:
            type: string
    CustomerUserReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
          format: uuid
        email:
          type: string
        mobile:
          type: string
        fname:
          type: string
        lname:
          type: string
        active:
          type: boolean
    CustomerUserRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
          format: uuid
        email:
          type: string
        mobile:
          type: string
        fname:
          type: string
        lname:
          type: string
        enrollmentId:
          type: string
        flags:
          type: integer
          format: int32
        hasPassword:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    CustomerHostReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        host:
          type: string
        theme:
          type: string
        logo:
          type: string
        successUrl:
          type: string
        failureUrl:
          type: string
        hook:
          type: string
        hookUser:
          type: string
        hookPass:
          type: string
        hookActive:
          type: boolean
        active:
          type: boolean
    CustomerHostRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        key:
          type: string
          format: uuid
        name:
          type: string
        customerName:
          type: string
        host:
          type: string
        theme:
          type: string
        logo:
          type: string
        successUrl:
          type: string
        failureUrl:
          type: string
        flags:
          type: integer
          format: int32
        rate:
          type: number
          format: float
        hook:
          type: string
        hookUser:
          type: string
        hookPass:
          type: string
        hookActive:
          type: boolean
        userLimit:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    AdminReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        newPassword:
          type: string
        active:
          type: boolean
    AdminRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    AdminUserReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
          format: uuid
        email:
          type: string
        mobile:
          type: string
        fname:
          type: string
        lname:
          type: string
        newPassword:
          type: string
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
        active:
          type: boolean
        demo:
          type: boolean
    AdminUserRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
          format: uuid
        email:
          type: string
        mobile:
          type: string
        fname:
          type: string
        lname:
          type: string
        enrollmentId:
          type: string
        flags:
          type: integer
          format: int32
        totalAlerts:
          type: integer
          format: int32
        unreadAlerts:
          type: integer
          format: int32
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        hasPassword:
          type: boolean
        customerName:
          type: string
        active:
          type: boolean
        demo:
          type: boolean
    AdminCustomerHostReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        customerId:
          type: string
          format: uuid
        host:
          type: string
        theme:
          type: string
        logo:
          type: string
        successUrl:
          type: string
        failureUrl:
          type: string
        hook:
          type: string
        hookUser:
          type: string
        hookPass:
          type: string
        hookActive:
          type: boolean
        sendEmail:
          type: boolean
        sendSMS:
          type: boolean
        userLimit:
          type: integer
          format: int32
        flags:
          type: integer
          format: int32
        rate:
          type: number
          format: float
        active:
          type: boolean
    AdminCustomerHostRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        key:
          type: string
          format: uuid
        name:
          type: string
        customerName:
          type: string
        host:
          type: string
        theme:
          type: string
        logo:
          type: string
        successUrl:
          type: string
        failureUrl:
          type: string
        userLimit:
          type: integer
          format: int32
        flags:
          type: integer
          format: int32
        rate:
          type: number
          format: float
        hook:
          type: string
        hookUser:
          type: string
        hookPass:
          type: string
        hookActive:
          type: boolean
        sendEmail:
          type: boolean
        sendSMS:
          type: boolean
        activeUsers:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    AdminCustomerReqDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contactName:
          type: string
        contactEmail:
          type: string
        refId:
          type: string
        minRate:
          type: number
          format: float
        userLimit:
          type: integer
          format: int32
        newPassword:
          type: string
        active:
          type: boolean
        billing:
          type: boolean
    CustomerRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contactName:
          type: string
        contactEmail:
          type: string
        refId:
          type: string
        userLimit:
          type: integer
          format: int32
        minRate:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
        billing:
          type: boolean
    Answer:
      type: object
      properties:
        qid:
          type: integer
          format: int32
        aid:
          type: integer
          format: int32
    IdentityQuizReqDTO:
      required:
        - id
        - key
      type: object
      properties:
        key:
          type: string
        id:
          type: integer
          format: int32
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    UserRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        fname:
          type: string
        lname:
          type: string
        idpass:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
        flags:
          type: integer
          format: int32
    UserOtpReqDTO:
      required:
        - code
        - key
      type: object
      properties:
        key:
          type: string
        code:
          type: string
    UserOtpRespDTO:
      type: object
      properties:
        key:
          type: string
        passcode:
          type: string
    UserRenewOtpReqDTO:
      required:
        - key
      type: object
      properties:
        key:
          type: string
    UserRegReqDTO:
      required:
        - email
        - fname
        - lname
        - password
        - recoveryAnswer
        - recoveryQuestion
      type: object
      properties:
        email:
          type: string
        mobile:
          maxLength: 10
          minLength: 10
          type: string
        fname:
          type: string
        lname:
          type: string
        password:
          maxLength: 20
          minLength: 8
          type: string
        recoveryQuestion:
          maximum: 10
          minimum: 1
          type: integer
          format: int32
        recoveryAnswer:
          type: string
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
    UserLoginRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        fname:
          type: string
        lname:
          type: string
        idpass:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
        flags:
          type: integer
          format: int32
        token:
          type: string
        expires:
          type: integer
          format: int64
        refresh:
          type: string
    TokenReqDTO:
      required:
        - token
      type: object
      properties:
        token:
          type: string
    ActionTokenRespDTO:
      type: object
      properties:
        token:
          type: string
        recoveryQuestion:
          type: integer
          format: int32
    PasswordResetReqDTO:
      required:
        - password
        - recoveryAnswer
        - token
      type: object
      properties:
        token:
          type: string
        recoveryAnswer:
          type: string
        password:
          maxLength: 20
          minLength: 8
          type: string
    PasswordRecoveryReqDTO:
      required:
        - email
      type: object
      properties:
        email:
          type: string
    LoginReqDTO:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    IdentityReqDTO:
      required:
        - city
        - ssn
        - state
        - street1
        - zip
      type: object
      properties:
        dob:
          type: string
          format: date
        mobile:
          maxLength: 10
          minLength: 10
          type: string
        ssn:
          maxLength: 9
          minLength: 9
          type: string
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          maxLength: 2
          minLength: 2
          type: string
        zip:
          maxLength: 5
          minLength: 5
          type: string
        country:
          type: string
    CloseAccountReqDTO:
      required:
        - recoveryAnswer
        - token
      type: object
      properties:
        recoveryAnswer:
          type: string
        token:
          type: string
    ChangeRecoveryReqDTO:
      required:
        - oldRecoveryAnswer
        - recoveryAnswer
        - recoveryQuestion
        - token
      type: object
      properties:
        recoveryQuestion:
          maximum: 10
          minimum: 1
          type: integer
          format: int32
        recoveryAnswer:
          type: string
        oldRecoveryAnswer:
          type: string
        token:
          type: string
    ChangePasswordReqDTO:
      required:
        - newPassword
        - oldPassword
        - username
      type: object
      properties:
        username:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string
    UserNotificationsPref:
      type: object
      properties:
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
    ChangeEmailReqDTO:
      required:
        - email
        - recoveryAnswer
        - token
      type: object
      properties:
        email:
          type: string
        recoveryAnswer:
          type: string
        token:
          type: string
    Webhook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - ACCNEW
            - IDFAIL
            - IDSVCOUT
            - ACCREG
            - ACCREGFAIL
            - ACCCLOSED
            - ACCLOCKED
            - ACCLOGINFAIL
            - ACCALERT
            - SCOREREF
            - REPORTREF
            - TEST
            - ERROR
        user_id:
          type: string
          format: uuid
        host_id:
          type: string
          format: uuid
        alert_id:
          type: string
          format: uuid
        alert_date:
          type: string
          format: date-time
        alert_source:
          type: string
        time:
          type: string
          format: date-time
        error_code:
          type: string
        error_msg:
          type: string
    AlertReqDTO:
      type: object
      properties:
        enrollmentId:
          type: string
        alertId:
          type: string
        alertType:
          type: string
        creationDate:
          type: string
          format: date-time
        dataSource:
          type: string
        dateReported:
          type: string
          format: date-time
        reportingFrequency:
          type: string
        tenantKey:
          type: string
        institutionType:
          type: string
        institutionName:
          type: string
        memberNumber:
          type: string
        inquiryIntent:
          type: string
        inquiryType:
          type: string
        endUserText:
          type: string
        institutionAddressLine1:
          type: string
        institutionAddressLine2:
          type: string
        institutionCity:
          type: string
        institutionState:
          type: string
        institutionPostalCode:
          type: string
        institutionPhoneNumber:
          type: string
        customerReferenceNumber:
          type: string
        postedDuringMaintenancePeriod:
          type: boolean
    DateViewRequest:
      required:
        - name
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - NONE
            - LIST
            - ZSET
            - KEY
            - SET
        name:
          type: string
        key:
          type: string
        page:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
    Action:
      type: object
      properties:
        type:
          type: string
          enum:
            - DELETE
            - NONE
        description:
          type: string
    DataViewResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        headers:
          type: array
          items:
            type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/TableRow'
    RowColumnMeta:
      type: object
      properties:
        type:
          type: string
          enum:
            - JOBS_BUTTON
        data:
          type: object
    TableColumn:
      type: object
      properties:
        type:
          type: string
          enum:
            - DISPLAY
            - ACTION
        value:
          type: object
        meta:
          type: array
          items:
            $ref: '#/components/schemas/RowColumnMeta'
    TableRow:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/TableColumn'
        meta:
          type: array
          items:
            $ref: '#/components/schemas/RowColumnMeta'
    QueueExploreRequest:
      required:
        - name
        - src
        - type
      type: object
      properties:
        type:
          type: string
          enum:
            - NONE
            - LIST
            - ZSET
            - KEY
            - SET
        name:
          type: string
        src:
          type: string
        page:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
    PauseUnpauseQueueRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        pause:
          type: boolean
    BaseResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    MessageMoveRequest:
      type: object
      properties:
        src:
          type: string
        srcType:
          type: string
          enum:
            - NONE
            - LIST
            - ZSET
            - KEY
            - SET
        dst:
          type: string
        dstType:
          type: string
          enum:
            - NONE
            - LIST
            - ZSET
            - KEY
            - SET
        others:
          type: object
          additionalProperties:
            type: object
    MessageMoveResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        value:
          type: boolean
        numberOfMessageTransferred:
          type: integer
          format: int32
    DataTypeRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    DataDeleteRequest:
      required:
        - data_set
        - queue
      type: object
      properties:
        queue:
          type: string
        data_set:
          type: string
    BooleanResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        value:
          type: boolean
    MessageDeleteRequest:
      required:
        - message_id
        - queue
      type: object
      properties:
        queue:
          type: string
        message_id:
          type: string
    StringResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        val:
          type: string
    ChartDataRequest:
      type: object
      properties:
        type:
          type: string
          enum:
            - LATENCY
            - STATS
        queue:
          type: string
        number:
          type: integer
          format: int32
        aggregationType:
          type: string
          enum:
            - DAILY
            - WEEKLY
            - MONTHLY
        dateTypes:
          type: array
          items:
            type: string
            enum:
              - SUCCESSFUL
              - DISCARDED
              - MOVED_TO_DLQ
              - RETRIED
              - EXECUTION
    ChartDataResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            type: array
            items:
              type: object
        title:
          type: string
        hTitle:
          type: string
        vTitle:
          type: string
    DirectUserRegReqDTO:
      required:
        - email
        - fname
        - lname
      type: object
      properties:
        email:
          type: string
        mobile:
          maxLength: 10
          minLength: 10
          type: string
        fname:
          type: string
        lname:
          type: string
        smsMsg:
          type: boolean
        emailMsg:
          type: boolean
        pushMsg:
          type: boolean
    PreauthTokenDTO:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        token:
          type: string
    DirectLoginReqDTO:
      required:
        - apikey
        - secret
      type: object
      properties:
        apikey:
          type: string
        secret:
          type: string
    LoginRespDTO:
      type: object
      properties:
        token:
          type: string
        expires:
          type: integer
          format: int64
        refresh:
          type: string
    DirectChangeMobileReqDTO:
      type: object
      properties:
        mobile:
          maxLength: 10
          minLength: 10
          type: string
    DirectChangeEmailReqDTO:
      required:
        - email
      type: object
      properties:
        email:
          type: string
    CustomerLoginRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        minRate:
          type: number
          format: float
        name:
          type: string
        contactName:
          type: string
        contactEmail:
          type: string
        token:
          type: string
        refresh:
          type: string
        expires:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    EfxAlertsReqDTO:
      type: object
      properties:
        partnerAlertRecord:
          type: array
          items:
            $ref: '#/components/schemas/AlertReqDTO'
    EfxAlertRespDTO:
      type: object
      properties:
        alertId:
          type: string
        operationStatus:
          type: string
        operationStatusMessage:
          type: string
    EfxAlertsRespDTO:
      type: object
      properties:
        partnerAlertResponses:
          type: array
          items:
            $ref: '#/components/schemas/EfxAlertRespDTO'
    EFXFUpdateDTO:
      type: object
      properties:
        eid:
          type: string
        id:
          type: string
        doc:
          type: string
        t:
          type: string
    EFXFeatureUpdateDTO:
      type: object
      properties:
        d:
          type: string
          format: date-time
        updates:
          type: array
          items:
            $ref: '#/components/schemas/EFXFUpdateDTO'
    EFXDailyAlertDTO:
      type: object
      properties:
        eid:
          type: string
        id:
          type: string
        aid:
          type: string
        d:
          type: string
          format: date
        t:
          type: string
        s:
          type: string
    ApplicationContext:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/ApplicationContext'
        id:
          type: string
        displayName:
          type: string
        applicationName:
          type: string
        startupDate:
          type: integer
          format: int64
        autowireCapableBeanFactory:
          $ref: '#/components/schemas/AutowireCapableBeanFactory'
        environment:
          $ref: '#/components/schemas/Environment'
        beanDefinitionNames:
          type: array
          items:
            type: string
        beanDefinitionCount:
          type: integer
          format: int32
        parentBeanFactory:
          $ref: '#/components/schemas/BeanFactory'
        classLoader:
          type: object
          properties:
            parent:
              type: object
              properties:
                name:
                  type: string
                unnamedModule:
                  type: object
                  properties:
                    layer:
                      type: object
                    name:
                      type: string
                    descriptor:
                      type: object
                      properties:
                        open:
                          type: boolean
                        automatic:
                          type: boolean
                    classLoader:
                      type: object
                      properties:
                        name:
                          type: string
                        defaultAssertionStatus:
                          type: boolean
                          writeOnly: true
                        registeredAsParallelCapable:
                          type: boolean
                        definedPackages:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              annotations:
                                type: array
                                items:
                                  type: object
                              declaredAnnotations:
                                type: array
                                items:
                                  type: object
                              sealed:
                                type: boolean
                              specificationTitle:
                                type: string
                              specificationVersion:
                                type: string
                              specificationVendor:
                                type: string
                              implementationTitle:
                                type: string
                              implementationVersion:
                                type: string
                              implementationVendor:
                                type: string
                    annotations:
                      type: array
                      items:
                        type: object
                    declaredAnnotations:
                      type: array
                      items:
                        type: object
                    named:
                      type: boolean
                    packages:
                      uniqueItems: true
                      type: array
                      items:
                        type: string
                defaultAssertionStatus:
                  type: boolean
                  writeOnly: true
                registeredAsParallelCapable:
                  type: boolean
                definedPackages:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      annotations:
                        type: array
                        items:
                          type: object
                      declaredAnnotations:
                        type: array
                        items:
                          type: object
                      sealed:
                        type: boolean
                      specificationTitle:
                        type: string
                      specificationVersion:
                        type: string
                      specificationVendor:
                        type: string
                      implementationTitle:
                        type: string
                      implementationVersion:
                        type: string
                      implementationVendor:
                        type: string
            name:
              type: string
            unnamedModule:
              type: object
              properties:
                layer:
                  type: object
                name:
                  type: string
                descriptor:
                  type: object
                  properties:
                    open:
                      type: boolean
                    automatic:
                      type: boolean
                classLoader:
                  type: object
                  properties:
                    name:
                      type: string
                    defaultAssertionStatus:
                      type: boolean
                      writeOnly: true
                    registeredAsParallelCapable:
                      type: boolean
                    definedPackages:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          annotations:
                            type: array
                            items:
                              type: object
                          declaredAnnotations:
                            type: array
                            items:
                              type: object
                          sealed:
                            type: boolean
                          specificationTitle:
                            type: string
                          specificationVersion:
                            type: string
                          specificationVendor:
                            type: string
                          implementationTitle:
                            type: string
                          implementationVersion:
                            type: string
                          implementationVendor:
                            type: string
                annotations:
                  type: array
                  items:
                    type: object
                declaredAnnotations:
                  type: array
                  items:
                    type: object
                named:
                  type: boolean
                packages:
                  uniqueItems: true
                  type: array
                  items:
                    type: string
            defaultAssertionStatus:
              type: boolean
              writeOnly: true
            registeredAsParallelCapable:
              type: boolean
            definedPackages:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  annotations:
                    type: array
                    items:
                      type: object
                  declaredAnnotations:
                    type: array
                    items:
                      type: object
                  sealed:
                    type: boolean
                  specificationTitle:
                    type: string
                  specificationVersion:
                    type: string
                  specificationVendor:
                    type: string
                  implementationTitle:
                    type: string
                  implementationVersion:
                    type: string
                  implementationVendor:
                    type: string
    AutowireCapableBeanFactory:
      type: object
    BeanFactory:
      type: object
    Environment:
      type: object
      properties:
        activeProfiles:
          type: array
          items:
            type: string
        defaultProfiles:
          type: array
          items:
            type: string
    RedirectView:
      type: object
      properties:
        applicationContext:
          $ref: '#/components/schemas/ApplicationContext'
        servletContext:
          type: object
          properties:
            classLoader:
              type: object
              properties:
                name:
                  type: string
                defaultAssertionStatus:
                  type: boolean
                  writeOnly: true
                registeredAsParallelCapable:
                  type: boolean
                definedPackages:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      annotations:
                        type: array
                        items:
                          type: object
                      declaredAnnotations:
                        type: array
                        items:
                          type: object
                      sealed:
                        type: boolean
                      specificationTitle:
                        type: string
                      specificationVersion:
                        type: string
                      specificationVendor:
                        type: string
                      implementationTitle:
                        type: string
                      implementationVersion:
                        type: string
                      implementationVendor:
                        type: string
            majorVersion:
              type: integer
              format: int32
            minorVersion:
              type: integer
              format: int32
            sessionTrackingModes:
              uniqueItems: true
              type: array
              writeOnly: true
              items:
                type: string
                enum:
                  - COOKIE
                  - URL
                  - SSL
            attributeNames:
              type: object
            contextPath:
              type: string
            initParameterNames:
              type: object
            servletNames:
              type: object
              deprecated: true
            sessionTimeout:
              type: integer
              format: int32
            effectiveMajorVersion:
              type: integer
              format: int32
            effectiveMinorVersion:
              type: integer
              format: int32
            servlets:
              type: object
              deprecated: true
            serverInfo:
              type: string
            servletContextName:
              type: string
            servletRegistrations:
              type: object
              additionalProperties:
                type: object
                properties:
                  runAsRole:
                    type: string
                  mappings:
                    type: array
                    items:
                      type: string
                  name:
                    type: string
                  className:
                    type: string
                  initParameters:
                    type: object
                    additionalProperties:
                      type: string
            filterRegistrations:
              type: object
              additionalProperties:
                type: object
                properties:
                  servletNameMappings:
                    type: array
                    items:
                      type: string
                  urlPatternMappings:
                    type: array
                    items:
                      type: string
                  name:
                    type: string
                  className:
                    type: string
                  initParameters:
                    type: object
                    additionalProperties:
                      type: string
            sessionCookieConfig:
              type: object
              properties:
                name:
                  type: string
                path:
                  type: string
                comment:
                  type: string
                domain:
                  type: string
                secure:
                  type: boolean
                maxAge:
                  type: integer
                  format: int32
                httpOnly:
                  type: boolean
            defaultSessionTrackingModes:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - COOKIE
                  - URL
                  - SSL
            effectiveSessionTrackingModes:
              uniqueItems: true
              type: array
              items:
                type: string
                enum:
                  - COOKIE
                  - URL
                  - SSL
            jspConfigDescriptor:
              type: object
              properties:
                taglibs:
                  type: array
                  items:
                    type: object
                    properties:
                      taglibURI:
                        type: string
                      taglibLocation:
                        type: string
                jspPropertyGroups:
                  type: array
                  items:
                    type: object
                    properties:
                      buffer:
                        type: string
                      defaultContentType:
                        type: string
                      elIgnored:
                        type: string
                      pageEncoding:
                        type: string
                      scriptingInvalid:
                        type: string
                      isXml:
                        type: string
                      includePreludes:
                        type: array
                        items:
                          type: string
                      includeCodas:
                        type: array
                        items:
                          type: string
                      deferredSyntaxAllowedAsLiteral:
                        type: string
                      trimDirectiveWhitespaces:
                        type: string
                      errorOnUndeclaredNamespace:
                        type: string
                      urlPatterns:
                        type: array
                        items:
                          type: string
            virtualServerName:
              type: string
            requestCharacterEncoding:
              type: string
            responseCharacterEncoding:
              type: string
          writeOnly: true
        contentType:
          type: string
        requestContextAttribute:
          type: string
        staticAttributes:
          type: object
          additionalProperties:
            type: object
        exposePathVariables:
          type: boolean
        exposeContextBeansAsAttributes:
          type: boolean
          writeOnly: true
        exposedContextBeanNames:
          type: array
          writeOnly: true
          items:
            type: string
        beanName:
          type: string
        url:
          type: string
        contextRelative:
          type: boolean
          writeOnly: true
        http10Compatible:
          type: boolean
          writeOnly: true
        exposeModelAttributes:
          type: boolean
          writeOnly: true
        encodingScheme:
          type: string
          writeOnly: true
        statusCode:
          type: string
          writeOnly: true
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        expandUriTemplateVariables:
          type: boolean
          writeOnly: true
        propagateQueryParams:
          type: boolean
          writeOnly: true
        hosts:
          type: array
          items:
            type: string
        redirectView:
          type: boolean
        propagateQueryProperties:
          type: boolean
        attributes:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        attributesMap:
          type: object
          additionalProperties:
            type: object
        attributesCSV:
          type: string
          writeOnly: true
    UserConfigDTO:
      type: object
      properties:
        theme:
          type: string
        logo:
          type: string
        flags:
          type: integer
          format: int32
    IdentityQuizDTO:
      type: object
      properties:
        key:
          type: string
        id:
          type: integer
          format: int32
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int32
        text:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    IdentityMobileRespDTO:
      type: object
      properties:
        mobile:
          type: string
        token:
          type: string
    CreditScoreAbstractScore:
      type: object
      properties:
        generatedDate:
          type: string
          format: date-time
        scoreType:
          type: string
          enum:
            - US_EFX
            - US_3B
        id:
          type: string
        creditReportId:
          type: string
    CreditScoreHistoryProviderViewScore:
      type: object
      properties:
        score:
          type: integer
          format: int32
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
    CreditScoreHistoryScore:
      type: object
      properties:
        generatedDate:
          type: string
          format: date-time
        scoreType:
          type: string
          enum:
            - US_EFX
            - US_3B
        id:
          type: string
        scoreModel:
          type: string
          enum:
            - VANTAGE
            - ERS
            - FICO
            - UNKNOWN
        providerViews:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreHistoryProviderViewScore'
    CreditScoreLoanRiskRangeScore:
      type: object
      properties:
        low:
          type: integer
          format: int32
        high:
          type: integer
          format: int32
        name:
          type: string
    CreditScoreProviderViewScore:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        score:
          type: integer
          format: int32
        scoreRanges:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreRangeScore'
        loanRiskRanges:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreLoanRiskRangeScore'
        scoreReasons:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreReasonScore'
    CreditScoreRangeScore:
      type: object
      properties:
        low:
          type: integer
          format: int32
        high:
          type: integer
          format: int32
        name:
          type: string
    CreditScoreReasonScore:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        creditScoreFactorEffect:
          type: string
          enum:
            - HELPING
            - HURTING
            - NEUTRAL
    CreditScoreScore:
      type: object
      properties:
        providerViews:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreProviderViewScore'
        id:
          type: string
        scoreType:
          type: string
          enum:
            - US_EFX
            - US_3B
        scoreModel:
          type: string
          enum:
            - VANTAGE
            - ERS
            - FICO
            - UNKNOWN
        generatedDate:
          type: string
          format: date-time
    BankruptcyReport:
      type: object
      properties:
        id:
          type: string
        filedDate:
          type: string
          format: date-time
        reportedDate:
          type: string
          format: date-time
        referenceNumber:
          type: string
        dispositionStatus:
          $ref: '#/components/schemas/CodeDescriptionReport'
        courtName:
          type: string
        liability:
          $ref: '#/components/schemas/MoneyReport'
        exemptAmount:
          $ref: '#/components/schemas/MoneyReport'
        assetAmount:
          $ref: '#/components/schemas/MoneyReport'
    CodeDescriptionReport:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    CollectionItemReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        id:
          type: string
        reportedDate:
          type: string
          format: date-time
        assignedDate:
          type: string
          format: date-time
        agencyClient:
          type: string
        orginalAmountOwed:
          $ref: '#/components/schemas/MoneyReport'
        accountNumber:
          type: string
        accountDesignatorCode:
          type: string
          enum:
            - AUTHORIZED_USER
            - CO_MAKER
            - DECEASED
            - INDIVIDUAL_ACCOUNT
            - JOINT_ACCOUNT
            - MAKER
            - ON_BEHALF_OF_ANOTHER_PERSON
            - SHARED
            - TERMINATED
            - UNDESIGNATED
        balanceDate:
          type: string
          format: date-time
        statusDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - CLOSED
            - FROZEN
            - OPEN
            - REFINANCED
            - TRANSFERRED
            - ACCOUNT_DISPUTED
            - ADJUSTMENT
            - CHECKED
            - FINANCIAL_COUNSELOR
            - IN_BANKRUPTCY
            - NEW_LISTING
            - OTHER
            - PAID
            - PAYMENT
            - SETTLED
            - STATUS_UNKNOWN
            - SUPPRESS_COLLECTION
            - UNPAID
            - UNSETTLED
            - WAGE_EARNER
        amount:
          $ref: '#/components/schemas/MoneyReport'
    ConsumerStatementReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        id:
          type: string
        reportedDate:
          type: string
          format: date-time
        statement:
          type: string
    ContactInformationReport:
      type: object
      properties:
        contactName:
          type: string
        address:
          $ref: '#/components/schemas/InternationalAddressReport'
        phone:
          $ref: '#/components/schemas/InternationalPhoneReport'
    CountryReport:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    CreditReportAccountReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        id:
          type: string
        accountOpen:
          type: boolean
        accountName:
          type: string
        contactInformation:
          $ref: '#/components/schemas/ContactInformationReport'
        accountNumber:
          type: string
        accountStatus:
          type: string
          enum:
            - BANKRUPTCY_OR_WAGE_EARNER_PLAN
            - COLLECTION_OR_CHARGEOFF
            - FORECLOSURE
            - FORECLOSURE_OR_REPOSSESSION
            - LATE_30_DAYS
            - LATE_60_DAYS
            - LATE_90_DAYS
            - WAGE_EARNER_PLAN
            - TOO_NEW_TO_RATE
            - PAYS_AS_AGREED
            - NOT_MORE_THAN_TWO_PAYMENTS_PAST_DUE
            - NOT_MORE_THAN_THREE_PAYMENTS_PAST_DUE
            - NOT_MORE_THAN_FOUR_PAYMENTS_PAST_DUE
            - OVER_120_DAYS_PAST_DUE
            - COLLECTION
            - INCLUDED_IN_CHAPTER_13
            - REPOSSESSION
            - CHARGE_OFF
            - ZERO_BALANCE_AND_CURRENT_ACCOUNT
            - NO_RATE_REPORTED
            - ACCOUNT_INACTIVE
            - LOST_OR_STOLEN_CARD
            - CONTACT_MEMBER_FOR_STATUS
            - REFINANCED_OR_RENEWED
            - CONSUMER_DECEASED
            - IN_FINANCIAL_COUNSELING
            - FORECLOSURE_PROCESS_STARTED
            - IN_WEP
            - ADJUSTMENT_PENDING
            - DISPUTE_RESOLUTION_PENDING
            - INCLUDED_IN_BANKRUPTCY
            - IN_BK
            - ASSIGNED_TO_US_DEPT_OF_ED
            - UNAVAILABLE
        paymentResponsibility:
          type: string
          enum:
            - INDIVIDUAL
            - JOINT_CONTRACTUAL_LIABILITY
            - SHARED
            - UNDESIGNATED
        highCreditAmount:
          $ref: '#/components/schemas/MoneyReport'
        accountType:
          type: string
          enum:
            - REVOLVING
            - MORTGAGE
            - INSTALLMENT
            - OTHER
        creditLimitAmount:
          $ref: '#/components/schemas/MoneyReport'
        termDurationMonths:
          type: integer
          format: int32
        termFrequency:
          type: string
        dateOpened:
          type: string
          format: date-time
        balanceAmount:
          $ref: '#/components/schemas/MoneyReport'
        reportedDate:
          type: string
          format: date-time
        pastDueAmount:
          $ref: '#/components/schemas/MoneyReport'
        lastPaymentDate:
          type: string
          format: date-time
        actualPayment:
          $ref: '#/components/schemas/MoneyReport'
        monthlyPayment:
          $ref: '#/components/schemas/MoneyReport'
        lastActivityDate:
          type: string
          format: date-time
        majorDelinquencyFirstReportedDate:
          type: string
          format: date-time
        monthsReviewed:
          type: integer
          format: int32
        creditorClassification:
          type: string
          enum:
            - ADVERTISING
            - CLOTHING
            - COLLECTION_SERVICES
            - CONTRACTORS
            - DEPARTMENT_AND_MAIL_ORDER
            - EMPLOYMENT
            - FARM_AND_GARDEN_SUPPLIES
            - FINANCE
            - GROCERY
            - HOME_FURNISHING
            - JEWELRY_AND_CAMERA
            - LUMBER_AND_HARDWARE
            - MEDICAL_AND_HEALTH
            - MISCELLANEOUS_AND_PUBLIC_RECORD
            - OIL_AND_NATIONAL_CREDIT_CARDS
            - PERSONAL_SERVICES_NOT_MEDICAL
            - REAL_ESTATE_AND_PUBLIC_ACCOMMODATION
            - SPORTING_GOODS
            - UTILITIES_AND_FUEL
            - WHOLESALE
            - AUTOMOTIVE
            - BANKING
            - CABLE_OR_CELLULAR
            - CHECK_GUARANTEE
            - CREDIT_UNION
            - EDUCATIONAL
            - FINANCIAL
            - GOVERNMENT
            - INSURANCE
            - MEDICAL_OR_HEALTH_CARE
            - OIL_COMPANY
            - PERSONAL_SERVICES
            - RENTAL_OR_LEASING
            - RETAIL
            - UTILITIES
            - UNKNOWN
        activityDesignator:
          type: string
          enum:
            - CLOSED
            - DEFAULT
            - FROZEN
            - LOST_OR_STOLEN
            - OPEN
            - PAID
            - PAID_AND_CLOSED
            - REFINANCED
            - TRANSFER_OR_SOLD
            - TRANSFER_OR_SOLD_OR_PAID
            - TRANSFERRED
            - UNKNOWN
        chargeOffAmount:
          $ref: '#/components/schemas/MoneyReport'
        deferredPaymentStartDate:
          type: string
          format: date-time
        balloonPaymentAmount:
          $ref: '#/components/schemas/MoneyReport'
        balloonPaymentDate:
          type: string
          format: date-time
        dateClosed:
          type: string
          format: date-time
        loanType:
          $ref: '#/components/schemas/CodeDescriptionReport'
        firstDelinquencyDate:
          type: string
          format: date-time
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CodeDescriptionReport'
        paymentHistory:
          type: array
          items:
            $ref: '#/components/schemas/PaymentHistoryYearReport'
        trendedDataHistory:
          $ref: '#/components/schemas/TrendedDataHistoryReport'
        isNegative:
          type: boolean
    CreditReportProviderDisputeInformationReport:
      type: object
      properties:
        contactName:
          type: string
        address:
          $ref: '#/components/schemas/InternationalAddressReport'
        phone:
          $ref: '#/components/schemas/InternationalPhoneReport'
    CreditReportProviderViewReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        summary:
          $ref: '#/components/schemas/CreditReportSummaryReport'
        revolvingAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CreditReportAccountReport'
        mortgageAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CreditReportAccountReport'
        installmentAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CreditReportAccountReport'
        otherAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CreditReportAccountReport'
        inquiries:
          type: array
          items:
            $ref: '#/components/schemas/InquiryReport'
        consumerStatements:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerStatementReport'
        publicRecords:
          $ref: '#/components/schemas/PublicRecordsReport'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionItemReport'
    CreditReportReport:
      type: object
      properties:
        providerViews:
          type: array
          items:
            $ref: '#/components/schemas/CreditReportProviderViewReport'
        id:
          type: string
        reportType:
          type: string
          enum:
            - US_EFX
            - US_3B
        generatedDate:
          type: string
          format: date-time
    CreditReportSummaryAccountsReport:
      type: object
      properties:
        balance:
          $ref: '#/components/schemas/MoneyReport'
        creditLimit:
          $ref: '#/components/schemas/MoneyReport'
        available:
          $ref: '#/components/schemas/MoneyReport'
        monthlyPaymentAmount:
          $ref: '#/components/schemas/MoneyReport'
        debtToCreditRatio:
          type: number
          format: double
        totalAccounts:
          type: integer
          format: int32
        totalNegativeAccounts:
          type: integer
          format: int32
        totalAccountsWithBalance:
          type: integer
          format: int32
    CreditReportSummaryReport:
      type: object
      properties:
        id:
          type: string
        reportGenerated:
          type: string
          format: date-time
        creditFileSecurityFreezeFlag:
          type: boolean
        reportType:
          type: string
          enum:
            - US_EFX
            - US_3B
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        subject:
          $ref: '#/components/schemas/PersonSubjectReport'
        creditScore:
          $ref: '#/components/schemas/CreditScoreReport'
        revolvingAccounts:
          $ref: '#/components/schemas/CreditReportSummaryAccountsReport'
        mortgageAccounts:
          $ref: '#/components/schemas/CreditReportSummaryAccountsReport'
        installmentAccounts:
          $ref: '#/components/schemas/CreditReportSummaryAccountsReport'
        otherAccounts:
          $ref: '#/components/schemas/CreditReportSummaryAccountsReport'
        totalOpenAccounts:
          $ref: '#/components/schemas/CreditReportSummaryAccountsReport'
        lengthOfCreditHistoryMonths:
          type: integer
          format: int32
        totalNegativeAccounts:
          type: integer
          format: int32
        averageAccountAgeMonths:
          type: integer
          format: int32
        oldestAccountOpenDate:
          type: string
          format: date-time
        oldestAccountName:
          type: string
        mostRecentAccountOpenDate:
          type: string
          format: date-time
        mostRecentAccountName:
          type: string
        totalConsumerStatements:
          type: integer
          format: int32
        mostRecentInquiryDate:
          type: string
          format: date-time
        mostRecentInquiryName:
          type: string
        totalPersonalInformation:
          type: integer
          format: int32
        totalInquires:
          type: integer
          format: int32
        totalPublicRecords:
          type: integer
          format: int32
        totalCollections:
          type: integer
          format: int32
        disputeInformation:
          $ref: '#/components/schemas/CreditReportProviderDisputeInformationReport'
    CreditScoreLoanRiskRangeReport:
      type: object
      properties:
        low:
          type: integer
          format: int32
        high:
          type: integer
          format: int32
        name:
          type: string
    CreditScoreRangeReport:
      type: object
      properties:
        low:
          type: integer
          format: int32
        high:
          type: integer
          format: int32
        name:
          type: string
    CreditScoreReasonReport:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        creditScoreFactorEffect:
          type: string
          enum:
            - HELPING
            - HURTING
            - NEUTRAL
    CreditScoreReport:
      type: object
      properties:
        score:
          type: integer
          format: int32
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        scoreRanges:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreRangeReport'
        loanRiskRanges:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreLoanRiskRangeReport'
        scoreReasons:
          type: array
          items:
            $ref: '#/components/schemas/CreditScoreReasonReport'
    EmployerReport:
      type: object
      properties:
        employerName:
          type: string
        employeeTitle:
          type: string
        currentEmployer:
          type: boolean
        ordinal:
          type: integer
          format: int32
        dateOfEmployment:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/InternationalAddressReport'
    InquiryReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        id:
          type: string
        type:
          type: string
          enum:
            - HARD
            - SOFT
            - OTHER
        prefix:
          $ref: '#/components/schemas/CodeDescriptionReport'
        reportedDate:
          type: string
          format: date-time
        contactInformation:
          $ref: '#/components/schemas/ContactInformationReport'
    InternationalAddressReport:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryReport'
        line1:
          type: string
        line2:
          type: string
        line3:
          type: string
        line4:
          type: string
        line5:
          type: string
        firstReportedDate:
          type: string
          format: date-time
        lastReportedDate:
          type: string
          format: date-time
        phone:
          $ref: '#/components/schemas/InternationalPhoneReport'
    InternationalPhoneReport:
      type: object
      properties:
        countryCode:
          type: string
        areaCode:
          type: string
        exchange:
          type: string
        extension:
          type: string
    JudgmentReport:
      type: object
      properties:
        id:
          type: string
        filedDate:
          type: string
          format: date-time
        reportedDate:
          type: string
          format: date-time
        courtName:
          type: string
        defendant:
          type: string
        amount:
          $ref: '#/components/schemas/MoneyReport'
        caseDocumentNumber:
          type: string
        plaintiff:
          type: string
        verifiedDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/CodeDescriptionReport'
        satisfiedDate:
          type: string
          format: date-time
    LienReport:
      type: object
      properties:
        id:
          type: string
        filedDate:
          type: string
          format: date-time
        reportedDate:
          type: string
          format: date-time
        courtName:
          type: string
        caseDocumentNumber:
          type: string
        lienAmount:
          $ref: '#/components/schemas/MoneyReport'
        verifiedDate:
          type: string
          format: date-time
        status:
          type: string
    MoneyReport:
      type: object
      properties:
        amount:
          type: number
          format: double
        currency:
          type: string
          enum:
            - USD
            - CAD
            - GBP
    PaymentHistoryMonthReport:
      type: object
      properties:
        monthType:
          type: string
          enum:
            - NO_DATA
            - NEGATIVE
            - POSITIVE
            - COLLECTION
            - NEW_ACCOUNT
            - BANKRUPTCY
            - FORECLOSURE
            - VOLUNTARY_SURRENDER
            - REPOSSESSION
            - CHARGE_OFF
            - COLLECTION_CHARGEOFF
        value:
          type: string
          enum:
            - PAYS_AS_AGREED
            - DAYSLATE_30
            - DAYSLATE_60
            - DAYSLATE_90
            - DAYSLATE_120
            - DAYSLATE_150
            - DAYSLATE_180
            - TOO_NEW_TO_RATE
            - BANKRUPTCY
            - COLLECTION
            - FORECLOSURE
            - VOLUNTARY_SURRENDER
            - REPOSSESSION
            - CHARGE_OFF
            - COLLECTION_CHARGEOFF
            - ZERO_BAL_AND_CURR_ACCT
            - NOT_REPORTED
            - UNAVAILABLE
    PaymentHistoryYearReport:
      type: object
      properties:
        year:
          type: integer
          format: int32
        january:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        february:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        march:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        april:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        may:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        june:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        july:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        august:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        september:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        october:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        november:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
        december:
          $ref: '#/components/schemas/PaymentHistoryMonthReport'
    PersonNameReport:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        suffix:
          type: string
    PersonSubjectReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        currentName:
          $ref: '#/components/schemas/PersonNameReport'
        aliases:
          type: array
          items:
            $ref: '#/components/schemas/PersonNameReport'
        currentAddress:
          $ref: '#/components/schemas/InternationalAddressReport'
        previousAddresses:
          type: array
          items:
            $ref: '#/components/schemas/InternationalAddressReport'
        homePhone:
          $ref: '#/components/schemas/InternationalPhoneReport'
        mobilePhone:
          $ref: '#/components/schemas/InternationalPhoneReport'
        nationalIdentifier:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        dateOfDeath:
          type: string
          format: date-time
        employmentHistory:
          type: array
          items:
            $ref: '#/components/schemas/EmployerReport'
    PublicRecordsReport:
      type: object
      properties:
        provider:
          type: string
          enum:
            - EFX
            - TU
            - EXP
            - UNKNOWN
        bankruptcies:
          type: array
          items:
            $ref: '#/components/schemas/BankruptcyReport'
        judgments:
          type: array
          items:
            $ref: '#/components/schemas/JudgmentReport'
        liens:
          type: array
          items:
            $ref: '#/components/schemas/LienReport'
    TrendedDataHistoryReport:
      type: object
      properties:
        name:
          type: string
        trendedDataList:
          type: array
          items:
            $ref: '#/components/schemas/TrendedDataReport'
    TrendedDataReport:
      type: object
      properties:
        name:
          type: string
        years:
          type: array
          items:
            $ref: '#/components/schemas/TrendedDataYearReport'
        labels:
          type: array
          items:
            type: string
    TrendedDataYearReport:
      type: object
      properties:
        year:
          type: string
        monthData:
          type: array
          items:
            type: string
    EfxConfigRespDTO:
      type: object
      properties:
        secret:
          type: string
        id:
          type: string
        url:
          type: string
    CreditMonitoringAlertAbstract:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - ACCOUNTNUMBERCHANGE
            - ADDRESS
            - BALANCEAMOUNT
            - BALANCEPERCENT
            - BANKRUPTCY
            - CHANGEVALUESCORE
            - COLLECTION
            - CRCACCESSWITHINVALIDPIN
            - CRCSTATEFREEZE
            - DORMANTMONTHS
            - GARNISHMENT
            - INQUIRY
            - LEGALITEM
            - MINIMUNLEVELSCORE
            - NAME
            - SCORECHANGE
            - TARGETSCORE
            - TAXLIEN
            - TRADELINE
            - BLOCKEDINQUIRY
            - HARDINQUIRY
            - UNKNOWN
        category:
          type: string
        name:
          type: string
        description:
          type: string
        dateReported:
          type: string
          format: date-time
        provider:
          type: string
          enum:
            - EFX
            - EXP
            - TU
            - UNKNOWN
        postedDuringMaintenancePeriod:
          type: boolean
    DataSelectorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        title:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/PairStringString'
    PairStringString:
      type: object
      properties:
        first:
          type: string
        second:
          type: string
    AlertRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        alertId:
          type: string
        alertType:
          type: string
        creationDate:
          type: string
          format: date-time
        dataSource:
          type: string
        dateReported:
          type: string
          format: date-time
        reportingFrequency:
          type: string
        institutionType:
          type: string
        institutionName:
          type: string
        inquiryIntent:
          type: string
        inquiryType:
          type: string
        endUserText:
          type: string
        institutionAddressLine1:
          type: string
        institutionAddressLine2:
          type: string
        institutionCity:
          type: string
        institutionState:
          type: string
        institutionPostalCode:
          type: string
        institutionPhoneNumber:
          type: string
        postedDuringMaintenancePeriod:
          type: boolean
    DetailedCustomerEntry:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userCount:
          type: integer
          format: int32
        lastActive:
          type: string
          format: date-time
        contactEmail:
          type: string
        billing:
          type: boolean
        contactName:
          type: string
        refId:
          type: string
        userLimit:
          type: integer
          format: int32
        minRate:
          type: number
          format: float
    PageableResponse:
      type: object
      properties:
        hasMore:
          type: boolean
        count:
          type: integer
          format: int32
        content:
          type: object
    CustomerStatsEntry:
      type: object
      properties:
        i:
          type: integer
          format: int32
        h:
          type: string
        c:
          type: integer
          format: int32
    CustomerStatsRespDTO:
      type: object
      properties:
        st:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerStatsEntry'
    DetailedHostEntry:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
          format: uuid
        id:
          type: string
          format: uuid
        host:
          type: string
        flags:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
        theme:
          type: string
        hookActive:
          type: boolean
        sendEmail:
          type: boolean
        sendSMS:
          type: boolean
        userCount:
          type: integer
          format: int32
        lastActive:
          type: string
          format: date-time
        customerName:
          type: string
        customerId:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        userLimit:
          type: integer
          format: int32
        logo:
          type: string
        successUrl:
          type: string
        failureUrl:
          type: string
        rate:
          type: number
          format: float
        hook:
          type: string
        hookUser:
          type: string
        hookPass:
          type: string
    HostStatsEntry:
      type: object
      properties:
        i:
          type: integer
          format: int32
        c:
          type: integer
          format: int32
    HostStatsRespDTO:
      type: object
      properties:
        st:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/HostStatsEntry'
    BillingRespDTO:
      type: object
      properties:
        st:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        data:
          type: object
    EnrollmentFeatureResponse:
      type: object
      properties:
        type:
          type: string
        responseMessage:
          type: string
        status:
          type: string
        enrollmentId:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        responseCode:
          type: integer
          format: int32
    Feature:
      type: object
      properties:
        code:
          type: string
          enum:
            - ONE_B_SCORE
            - ONE_B_SCORE_ANNUAL_VP
            - ONE_B_REPORT
            - ONE_B_CREDIT_MONITORING
            - ONE_B_ADHOC_REPORT
            - ONE_B_ADHOC_SCORE
            - ONE_B_SCORE_RAW
            - ONE_B_REPORT_RAW
            - ONE_B_ALERTS_RAW
            - ONE_B_REAL_TIME_CREDIT_MONITORING
            - ONE_B_ADHOC_REPORT_OFFLINE
            - ONE_B_ADHOC_SCORE_OFFLINE
            - ONE_B_CREDIT_MONITORING_OFFLINE
            - ONE_B_ADHOC_SCORE_ALT_001
            - ONE_B_ADHOC_SCORE_ALT_001_OFFLINE
            - ONE_B_SCORE_HRL
            - ONE_B_SCORE_DLY
            - ONE_B_SCORE_WKL
            - ONE_B_SCORE_MON
            - ONE_B_SCORE_BWK
            - ONE_B_SCORE_BMT
            - ONE_B_SCORE_QRT
            - ONE_B_SCORE_SYR
            - ONE_B_SCORE_YRL
            - ONE_B_SCORE_BYR
            - ONE_B_REPORT_HRL
            - ONE_B_REPORT_DLY
            - ONE_B_REPORT_WKL
            - ONE_B_REPORT_MON
            - ONE_B_REPORT_BWK
            - ONE_B_REPORT_BMT
            - ONE_B_REPORT_QRT
            - ONE_B_REPORT_SYR
            - ONE_B_REPORT_YRL
            - ONE_B_REPORT_BYR
            - THREE_B_SCORE
            - THREE_B_REPORT
            - THREE_B_CREDIT_MONITORING
            - THREE_B_ADHOC_SCORE
            - THREE_B_ADHOC_REPORT
            - THREE_B_SCORE_RAW
            - THREE_B_REPORT_RAW
            - THREE_B_ALERTS_RAW
            - THREE_B_SCORE_ONE_B_RAW
            - THREE_B_REPORT_ONE_B_RAW
            - THREE_B_ADHOC_REPORT_OFFLINE
            - THREE_B_ADHOC_SCORE_OFFLINE
            - THREE_B_CREDIT_MONITORING_OFFLINE
            - THREE_B_ADHOC_REPORT_ALT_001
            - THREE_B_ADHOC_REPORT_ALT_001_OFFLINE
            - THREE_B_SCORE_HRL
            - THREE_B_SCORE_DLY
            - THREE_B_SCORE_WKL
            - THREE_B_SCORE_MON
            - THREE_B_SCORE_BWK
            - THREE_B_SCORE_BMT
            - THREE_B_SCORE_QRT
            - THREE_B_SCORE_SYR
            - THREE_B_SCORE_YRL
            - THREE_B_SCORE_BYR
            - THREE_B_REPORT_HRL
            - THREE_B_REPORT_DLY
            - THREE_B_REPORT_WKL
            - THREE_B_REPORT_MON
            - THREE_B_REPORT_BWK
            - THREE_B_REPORT_BMT
            - THREE_B_REPORT_QRT
            - THREE_B_REPORT_SYR
            - THREE_B_REPORT_YRL
            - THREE_B_REPORT_BYR
            - CONSUMER_DATA
            - CREDIT_LOCK
            - NCTUE_MONITORING
            - CHILD_LOCK
            - TRANSUNION_LOCK
        description:
          type: string
    UserStatsEntry:
      type: object
      properties:
        i:
          type: integer
          format: int32
        h:
          type: string
        c:
          type: integer
          format: int32
    UserStatsRespDTO:
      type: object
      properties:
        st:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserStatsEntry'
    ActiveUserStatsEntry:
      type: object
      properties:
        h:
          type: string
        c:
          type: integer
          format: int32
    CloseRespDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountsClosed:
          type: integer
          format: int32
# Added from Equifax components of https://github.com/StitchCredit/b2c-redoc/redoc_spec.yaml
    EFXresponse:
      title: response
      required:
      - access_token
      - token_type
      - expires_in
      - scope
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
          format: int32
        scope:
          type: string
      example:
        access_token: 87e22d35-0089-4613-809b-62f248c2c978
        token_type: bearer
        expires_in: 610
        scope: read write
    EFXOAuthResp:
      type: object
      properties:
        access_token: 
          type: string
          example: 8495ea73-92af-629b-39c2-29dfcc891835
        token_type: 
          type: string
          example: bearer
        refresh_token: 
          type: string
          example: 3a73a2a8-2a2a-339c-39c2-a82a828799bd
        expires_in: 
          type: integer
          example: 1999
        scope: 
          type: string
          example: delivery
        IP_ADDRESS: 
          type: string
          example: 00.000.000.000      
    EFXConfigRespDTO:
      type: object
      properties:
        secret:
          type: string
          example: klUAnAFTtK7noBjUqO6x4anUszGrwrQdqelNp1N1XvssztqxFVfDp32dNgrco7ErVHYNH9lGUThExMvXQ3KnzPXrEBl5dkfGX0cHkGKI903jggCy2pc30Zvh0UWO4Hm5J3atOByM3KvSuMYOv6bnpeSRfmSxsZbeaF2gJrDaHS3zdT3SWY01M9CD54jUu6OiQBtxxpZs5aMVzRldf3jpQ1fGTLzlZABPFWqaJvd70vDkRRw98YZ1AWXWg67F1RMrgCknp9k6jQncGVxgFP9i18blXTczccbYdUS3HsBOVsY8AIOOY34WYuTO2K0Q099VsubdN51nTWpzpzyg6TwXjo08mWXzSAa6SHDXJKPvBcanEKdiBPUYkt2dXrAfnFe0kF954xEOTXsoey26tGcdEqbIVMfv0hON6prAaOU4BPQ2rUY5veSlxwDbbJvdAmkxJZoSnqJeP9NxSEPQl23d31sKlJ5FBODaXKUrl8lwARpZMFtVqUbQeNyGUlfrdD3MOT0FZi9vfohO97qt4IFfVRXVXMAO1QXG7Xh7ioggwSoyh1ylRn81AAsdVUpcxxIomc744YwFotdjyIDkLJ0ENFU3X2lsqtB1zpWjCJDwaDqRP9PVGYaAZ7m5gVYPLVOCeiIGHeBs6op4aUudl5hMUI6nGiW1uU9fH51w6WsIpfjqfolyJSSHf0EpPB5jnov6o0y0Cyf81QSlmrTGcGXChcpjq6cRx780culj3fKC1C8QSQvwoSGvEAIGz8Tpi1uTSEPtGyUVEmG21beirygZtIpogHBe0cja9UC62O1jEv46qKOeyuXfvGAcCJkOm94LINHqk5bSoTa8ud8je1G49xMojJBkdw3U7cwJgXO6U0mOBAsdSC0Agtc9UWw7GD96wBJ56EUlb5C9uPXoHFrlRYChctcbiAYUWbtYraYgfA7u8CAJldZiNgX50g2V2dUWMYOSjcVJpK9ndpCt4q8xEO6ogHsSXRDJ8u9FMBfFXfJ0FkEswiu1qNVzojKefJcN7o2NJBsuJm666oNthEXXQd1aeVagtmAQXIZ5ZCFJxj0xdwp778gZFfDnXmdzLMI4CdesK4w6wnmn0pKBqod8PoUzIkzzOifZsGtpL8fkR5ntbs1o9YlJMCTZOptZnvwL1FkuitkXXZOmkWkM9tqub0loayrPhBsZbzCxklpedW6mNn8G5y76Dq5KKL1KWgTAh4fjzKsMY0ikDftcMH0GkqhW7Gd7qeyaUBoNlZcb0vRsCDmLttzRHCemJS4JrEbgoH2BIKtgkndz25YMJ85mjiF8Qg3
        id:
          type: string
          example: 73b2e701-f730-1b90-af38-a492f73b2881_delivery
        url:
          type: string
          format: url
          example: https://example-efx-url.com/person/consumer-credsuite
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
#DOCUMENTATION ===============================================
- name: Getting Started
  description: |
        <h2>Before you start</h2>
        <p>
        We provide you with a host configuration for our development server and a demo user's identity in a <a href="https://www.postman.com/">Postman</a> environment.
        </p>
        <p>
        To quickly grasp the token flow and sequence of API calls, download and import the "Getting Started" <a href="/tag/Postman-Collections">Postman Collections</a> from the <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and the Postman environment we provided to you.<br>
        The <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and this documentation contain <a href="/tag/Postman-Collections">Postman Collections</a> for each API.
        </p>
        <p>
        <ul>
          <li><em><strong><a href="/tag/direct-controller">Direct API</a></strong> calls must originate from your server</em> </li>
          <li><em><strong><a href="/tag/direct-controller">User API</a></strong> calls must originate from the end-client</em> </li>
          <li><em><strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls must originate from the end-client</em> </li>
        </ul>
        Equifax end-points are accessible by first using the <a href="/tag/direct-controller">User API</a> <strong>/users/efx-config</strong> response data, and then the Equifax <strong>/oauth/token</strong> call. As mentioned above, <strong><a href="/tag/direct-controller">User API</a></strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device.
        </p>
        <p>
        It is not acceptable to pass any of the data to these calls or responses from these calls to your server. Do not save any data. Short term caching is fine, but long-term storage is not. 
        </p>
        <hr>
        <h2>How it works</h2>
        <p>
        With CRS's Consumer Credit API, you can offer Consumer Credit Scores and Credit Monitoring directly as part of your web or mobile experience.
        </p>
        <p>
        It's easy to add Credit Score & Reports to your existing customer experience by embedding our code into your HTML doc, page or website.
        </p>
        <hr>
        <h2>Getting started</h2>
        <p>First, let's determine the way in which you will interact with the consumer credit APIs. This will determine the type of integration that you require and how to implement the integration pattern.</p>
        <hr>

- name: Which Integration Option is right for you
  description: |
        <p>
        This guide is to help you choose the integration option for the Consumer Credit widget, web integration and/or API. 
        </p>
        <ol>
          <li>Usage of credit reporting on a web page with user authentication managed by CRS&#58; <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Web Widget with Integrated Authentication</a></li>
          <li>Usage of credit reporting on a web page with user authentication managed by you&#58; <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a></li>
          <li>Usage of credit reporting on a custom UI such as a website or mobile app with authentication managed on the website/in the app&#58; <a href="/tag/DevTools-API-Integration-for-Custom-Web-or-Mobile-App">API Integration for Custom Web or Mobile App</a></li>
        </ol>
        <p>
        <strong>FIRST</strong>&#58; Are you integrating the CRS widget into a web page?
        </p>
        <p>
        Either we can manage users or you can.
        </p>
        <ul>
        <li>
        If we are managing users, then your users register for a CRS account through the widget's registration and identity verification screens. Then, users log into the widget with an email and password after having already logged into your service. (Option 1 - <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Web Widget with Integrated Authentication</a>).
        </li>
        <li>
        If you are managing users, then they do not log in through the widget. Instead, you create your own registration screen utilizing our API. You can also create your own screens for the identity verification process (SMS one-time-code and identity quiz questions). You can merge the CRS registration & identity process with your own service's registration, but you have to adhere to the compliance guide for screens. (Option 2 - <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a>)
        </li>
        </ul>
        <p>
        <strong>OTHERWISE</strong>&#58; The 3rd Integration option is for customers who want to create their own UI, such as a website or mobile app, entirely using the CRS Consumer Credit API. User authentication is managed by the website or in the app.
        </p>
        <p>
        All custom screens created using the API require Equifax approval (see the compliance guide for approval guidelines). (Option 3 - <a href="/tag/DevTools-API-Integration-for-Custom-Web-or-Mobile-App">API Integration for Custom Web or Mobile App"</a>)<br>
        </p>
        <h3>Web Widget with Integrated Authentication</h3>
          <p>
          For this option, you embed an iframe and configure the Host URL where you will be loading the widget. The CRS widget can be customized to represent your look and feel in order to strengthen your relationship with customers.
          </p>
          <p>
          For testing, CRS can configure that any Host URL to load the widget (including localhost); this allows you to try this integration option by locally serving an html file with the following iframe. For production, the URL must be locked down so that the widget can only be rendered from that host. 
          </p>
          <p>
          More information can be found in section <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Web Widget with Integrated Authentication</a>.
          </p>
        <h3>Web Integration with Custom Authentication</h3>
          <p>
          This option does not require users to log in through the widget. Instead, you create a registration screen utilizing the CRS Consumer Credit API. 
          </p>
          <p>
          You can have screens for the identity verification process  for SMS one-time-code and identity quiz questions. Also, it is possible to merge the CRS registration/identity process with your own service's registration, as long as you follow the compliance guide for these screens. 
          </p>
          <p>
          The html <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Sample files</a> in the documentation demonstrate the different views for this integration option. 
          </p>
          <p>
          More information can be found in section <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a>.
          </p>
        <h3>API Integration for Custom Web or Mobile App</h3>
          <p>
          The 3rd Integration option is for customers who want to create their own UI, such as a website or mobile app, entirely using the CRS Consumer Credit API. User authentication is managed by the website or in the app.
          </p>
          <p>
          With this option, you can create your own user experience for connecting your users to their credit data by leveraging the same B2C API that the widget is utilizing.
          </p>
          <p>
          More information can be found in section <a href="/tag/DevTools-API-Integration-for-Custom-Web-or-Mobile-App">API Integration for Custom Web or Mobile App</a>.
          </p>
        <hr>
        <h2>Next Steps</h2>
        <p>
        Once you've decide on <a href="/tag/Which-Integration-Option-is-right-for-you">which integration option</a> is right for your use case, then it's a question of understanding how to implement the integration by looking at our samples and API guides below.
        </p>
        <hr>

- name: Overview of Developer Tools
  description: |
        <p>
        Below you will find a collection of tools to ease your development. Each section is built around the integration option that you have selected.
        </p>
        <p>
        Based on the integration option, there are different tools, however we always provide some sort of sample as well as documentation on the necessary integration steps.
        </p>

- name: DevTools - Web Widget with Integrated Authentication
  x-displayName: Web Widget with Integrated Authentication
  description: |
        <h3>Overview</h3>
          <p>
          The CRS widget allows easy integration into any site. Limited coding knowledge (e.g. HTML and CSS) is needed to activate and use the web widget. The widget is designed as a responive interface to support both full websites and mobile experiences.
          </p>
          <p>
          The CRS widget can be customized to represent your look and feel in order to strengthen your relationship with customers. It can be customized to embed seamlessly into your site including an embedded logo for personalization. It is possible to embed a logo for additional personalization
          </p>
          <p>
            The CRS widget includes credit features configured to your needs. These features are upgradeable as your site and requirements grow. No changes are required to your site for compliance.
          </p>
          <p>
          For this option, you embed an iframe and configure the Host URL where you will be loading the widget. For testing, CRS can configure that any Host URL to load the widget (including localhost); this allows you to try this integration option by locally serving an html file with the following iframe. For production, the URL must be locked down so that the widget can only be rendered from that host. 
          </p>
          <p>
            From sign up to launch in less than one week
          </p>
        <hr>

        <h3>Simple Integration Guide</h3>
        <p>
        <strong>Web Integration Requirements:</strong>
        <ul>
          <li><span style="background-color: #FFFF99">API Key</span></li>
          <li>Host Registration (eg your web site address)</li>
          <li><span style="background-color: #BBEE77">Integration Host &amp; parameters</span></li>
          <li><span style="background-color: #FF6666">Configuration Flags</span></li>
          <li><span style="background-color: #B2FFFF">Primary Theme Color (six character hex, without #)</span></li>
          <li><span style="background-color: #d2b2e5">View Option (options include: dashboard, all-in-one, or tile)</span></li>
          <li><span style="background-color: #FFA500">Logo URL  (URL of a logo to replace the CRS logo)</span></li>
        </ul>
        <p>
          Only the registered host can serve the UI with the designated API Key. Embed iFrame on a blank page under the registered host. Style the iFrame/page to suit your needs
        </p>
        <p>
        To embed into HTML, create an iframe as shown in the following example with its <strong>src</strong> reflecting this color-coded URL:
        <br>
        <strong>"<span style="background-color: #BBEE77"><a href="https://efx-dev.stitchcredit.com/api/users/start?key=">https://efx-dev.stitchcredit.com/api/users/start?key=</a></span><span style="background-color: #FFFF99">[API-KEY]</span><span style="background-color: #BBEE77">&ocf=</span><span style="background-color: #FF6666">[FLAGS]</span><span style="background-color: #BBEE77">&oct=</span><span style="background-color: #B2FFFF">[COLOR]</span><span style="background-color: #BBEE77">&view=</span><span style="background-color: #d2b2e5">[VIEW-OPTION]</span><span style="background-color: #BBEE77">&ocl=</span><span style="background-color: #FFA500">[LOGO-URL]</span>"</strong>
        </p>
        <h4>Sample Embed page</h4>
        <p>
        <div onload="doHighlight();"> 
        <pre><code class="language-html" id="sample_embed.html">
          &lt;html>
          &lt;head>
            &lt;title>CRS&lt;/title>
            &lt;meta name='description' content='CRS Consumer Credit Reports'/>
            &lt;link rel='icon' href='/favicon.ico'>
            &lt;style>
              body { background: #F9FAFB; }
              #sc-iframe { border:none;overflow:hidden;padding:0px;margin:0px;
              width:100%;height:100vh;z-index:1;position:absolute;left:0;top:0; }
            &lt;/style>
          &lt;/head>
          &lt;body>
            &lt;iframe id='sc-iframe'
              src='https://efx-dev.stitchcredit.com/api/users/start?key=[API-KEY]&ocf=[FLAGS]&oct=[COLOR]&view=[VIEW-OPTION]&ocl=[LOGO-URL]' 
              width='100%' height='100vh'>
            &lt;/iframe>
          &lt;/body>
          &lt;/html>
        </code></pre>
        </div>
        </p>
        <hr>

        <h3>Webhook Integration</h3>
        <p>
        Webhooks are available to notify you when an alert (or other notifications) comes in so that you can message users in whatever fashion you wish to return to your site.
        </p>
        <p>
        Please refer to additional details on <a href="/tag/Webhook-Integration">Webhook Integration</a>.
        </p>
        <hr>

        <h3>Web Messaging Integration</h3>
          <p>
          To interact with the Consumer Credit Widget, you will need to implement a structure using a window event listener.
          </p>
          <p>
          Please refer to additional details on <a href="/tag/Web-Messaging-Integration">Web Messaging Integration</a>.
          </p>
        <hr>

        <h3>Samples</h3>
          <p>
          Here is an example of the iframe code configured with API-Key, flags, and color:
          </p>
        <div onload="doHighlight();"> 
        <pre><code class="language-html" id="sample_iframe.html">
          &lt;iframe id="sc-iframe" 
          src="https://efx-dev.stitchcredit.com/api/users/start?key=d4eeb874-c6ae-4977-8b87-c0618b0bc194&ocf=537952251&ocl=https://www.premierconsumer.org/assets/images/en/logo.jpg&oct=5f5ce0"> 
          &lt;/iframe>
        </code></pre>
        </div>
        <p>
        Users must register for a CRS account through the widget's registration and identity verification screens.
        Many fields can be pre-populated (but not SSN and DoB).
        </p>
        <p>
        Users will need to log into the widget with an email and password after having already logged into your service.
        </p>
        <p>
        Here is an embedded example:
        <div onload="doHighlight();"> 
        <pre><code class="language-html" id="sample_widget.html">
        &lt;html>
          &lt;head>
            &lt;title>CRS&lt;/title>
            &lt;meta name="description" content="CRS Consumer Credit Reports"/>
            &lt;link rel="icon" href="/favicon.ico">
            &lt;style>
              body { background: #F9FAFB; }
              #sc-iframe { border:none;overflow:hidden;padding:0px;margin:0px;
              width:100%;height:100vh;z-index:1;position:absolute;left:0;top:0; }
            &lt;/style>
          &lt;/head>
          &lt;body>
            &lt;iframe id="sc-iframe" src="https://efx-dev.stitchcredit.com/api/users/start?key=[API-KEY]&ocf=[flags]&oct=[color]" width=“100%” height=“100vh”>&lt;/iframe>
          &lt;/body>
        &lt;/html>
        </code></pre>
        </div>
        <hr>

        <h4>Responsiveness Breakpoints</h4>
          <p>
          These are two main breakpoints we use to scale desktop, tablet, and mobile devices. Devices with a width larger than 960px will be treated as a desktop view, devices with smaller widths fall under tablet and mobile device scaling thus will be displayed as a mobile view. With that being said, the widget should scale well on small, medium, and large devices without issues.
          </p>
          <p>
          Each breakpoint (a key) matches with a fixed screen width (a value):
          <ul>
            <li>sm, small: 600px</li>
            <li>md, medium: 960px</li>
          </ul>
          </p>
        <hr>

        <h4>Web Widget in mobile mode</h4>
        <p>
        Here are examples of the screens from the Web Widget when viewed in small (mobile) mode:
        </p>
        
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094648-96573000-5a72-11eb-9429-6b84ba036804.png" alt="Image of page example for Sign Up" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094606-83446000-5a72-11eb-83c7-df5d4ba541ae.png" alt="Image of page example for Registering Terms of Use" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Login</h4>

        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094441-4aa48680-5a72-11eb-86c9-9a9e7a64ed90.png" alt="Image of credit report page example" style="width:50%; margin-top: -12%;" class="crop" />
          </div>
        </div>

        <h4>Identity</h4>

        <div class="row crop" style="display: flex" class="crop">
        <div class="column" style="flex: 50%; padding: 5px;">
          <img src="https://user-images.githubusercontent.com/76128486/105093444-c0a7ee00-5a70-11eb-85ef-b4a17e4c2b45.png" alt="Image of identity page example" style="width:100%" class="crop" />
        </div>
        <div class="column" style="flex: 50%; padding: 5px;">
          <img src="https://user-images.githubusercontent.com/76128486/105093564-edf49c00-5a70-11eb-8d03-c46d83010b07.png" alt="Image of page example for consumer consent language" style="width:100%" class="crop" />
        </div>
        </div>

        <h4>Identification (option 1): mobile</h4>

        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093896-6f4c2e80-5a71-11eb-9185-1a2b78596470.png" alt="Image of page for sending code via SMS to verify identity" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093817-504d9c80-5a71-11eb-8334-7e2ecb8d0129.png" alt="Image of page for entering identity verifying code via SMS" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Identification (option 2): quiz</h4>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093707-2ac09300-5a71-11eb-9abd-8c89bd399057.png" alt="Image of page for identification quiz" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093655-17adc300-5a71-11eb-96e3-d8a3162a2349.png" alt="Image of page for successful sign up as a result of successful identification" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Score - Dashboard</h4>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093416-b4239580-5a70-11eb-8e00-193613850be6.png" alt="Image of page for showing dashboard of scores returned by various bureaus" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093301-80e10680-5a70-11eb-99a3-e4b868dce698.png" alt="Image of page for showing score returned by a single bureaus" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Report</h4>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094067-b508f700-5a71-11eb-94f0-5b72489546fe.png" alt="Image of page for showing report summary" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094037-a6224480-5a71-11eb-8f45-31cf52bd78a2.png" alt="Image of page for showing score credit accounts" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Monitoring</h4>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093951-83902b80-5a71-11eb-8989-31bacb070fa2.png" alt="Image of page showing credit monitoring" style="width:50%; margin-top: -8%;" class="crop" />
          </div>
        </div>

        <h4>Identity Restoration</h4>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093759-3b710900-5a71-11eb-9f72-e67e6bba79d9.png" alt="Image of page showing ID restoration" style="width:50%; margin-top: -8%;" class="crop" />
          </div>
        </div>
        <hr>

        <h4>Web Widget in regular (medium) mode</h4>
          <p>
          Here are examples of the screens from the Web Widget when viewed in medium (web) mode:
          </p>
          
          <h4>Registration</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px;padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fregistration.png" alt="Image of page example for registration" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fregistration_content.png" alt="Image of page example for registration content" style="width:100%"/>
            </div>
          </div>

          <h4>Login</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2flogin.png" alt="Image of page example for Sign Up" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
            </div>
          </div>

          <h4>Identity</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fidentity.png" alt="Image of page example for identity verification" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fidentity_content.png" alt="Image of page example for identity verification content" style="width:100%"/>
            </div>
          </div>

          <h4>Mobile identification (option 1)</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fmobile_identification_1.png" alt="Image of page example for mobile identification (option 1)" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fmobile_identification_1_content.png" alt="Image of page example for mobile identification (option 1) content" style="width:100%"/>
            </div>
          </div>

          <h4>Identity quiz (option 2) and enrollment success</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fidentity_quiz_2.png" alt="Image of page example for identity quiz (option 2)" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fenrollment_success.png" alt="Image of page example for enrollment success" style="width:100%"/>
            </div>
          </div>

          <h4>Credit Score Dashboard</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fcredit_score_dashboard.png" alt="Image of page example for credit score" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
            </div>
          </div>

          <h4>Credit Report</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fcredit_report.png" alt="Image of page example for credit report" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fcredit_report_2.png" alt="Image of page example for credit report (continued)" style="width:100%"/>
            </div>
          </div>

          <h4>Credit Monitoring</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fcredit_monitoring.png" alt="Image of page example for credit report" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
            </div>
          </div>
          
          <h4>Identity Restoration</h4>
          <div class="row" style="display: flex; padding-bottom: 10px;">
            <div class="column" style="flex: 50%; padding: 5px; padding-bottom: 10px;">
              <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fidentity_restoration.png" alt="Image of page example for credit report" style="width:100%"/>
            </div>
            <div class="column" style="flex: 50%; padding: 5px;">
            </div>
          </div>

- name: DevTools - Web Integration with Custom Authentication
  x-displayName: Web Integration with Custom Authentication
  description: |
        <h3>Overview</h3>
        <p>
        If you are managing users, then they do not log in through the widget. Instead, you create your own registration screen utilizing our API. You can also create your own screens for the identity verification process (SMS one-time-code and identity quiz questions). You can merge the CRS registration & identity process with your own service's registration, but you have to adhere to the compliance guide for screens. 
        </p>
        <p>
        You can have screens for the identity verification process  for SMS one-time-code and identity quiz questions. Also, it is possible to merge the CRS registration/identity process with your own service's registration, as long as you follow the compliance guide for these screens. 
        </p>
        <p>
        <u>If a customer wants to create their own UI for the identity verification process,</u> they simply need to continue the API steps in the "Getting Started" Postman Collections (<a href="/tag/Postman-Collections">Consumer Credit - Getting Started - New User.postman_collection.json</a> and <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - Returning User.postman_collection.json</a>) with their custom screens until idpass is true, before they have the user's device redeem the preauth for the widget. If idpass is true for a user whose preauth token is redeemed using the widget, then the widget will render that user's credit dashboard (skipping the id verification process). If the user's device were to redeem the preauth token when idpass equals false, then the widget renders the built in widget screens for the identity verification process.
        </p>
        <h3>Simple Integration Guide</h3>
        <p>
        <strong>Web Integration Requirements:</strong>
        <ul>
          <li><span style="background-color: #FFFF99">API Key</span></li>
          <li>Host Registration (eg your web site address)</li>
          <li><span style="background-color: #BBEE77">Integration Host &amp; parameters</span></li>
          <li><span style="background-color: #FF6666">Configuration Flags</span></li>
          <li><span style="background-color: #B2FFFF">Primary Theme Color (six character hex, without #)</span></li>
          <li><span style="background-color: #FFA500">Logo URL  (URL of a logo to replace the CRS logo)</span></li>
          <li><span style="background-color: #d2b2e5">Pre-auth token – optional if using postmessage configuration</span></li>
        </ul>
        <p>
          Only the registered host can serve the UI with the designated API Key. Embed iFrame on a blank page under the registered host. Style the iFrame/page to suit your needs
        </p>
        <p>
        To embed into HTML, create an iframe as shown in the following example with its <strong>src</strong> reflecting this color-coded URL:
        <br>
        <strong>"<span style="background-color: #BBEE77"><a href="https://efx-dev.stitchcredit.com/api/users/start?key=">https://efx-dev.stitchcredit.com/api/users/start?key=</a></span><span style="background-color: #FFFF99">[API-KEY]</span><span style="background-color: #d2b2e5">&token=[PREAUTH-TOKEN]</span><span style="background-color: #BBEE77">&ocf=</span><span style="background-color: #FF6666">[FLAGS]</span><span style="background-color: #BBEE77">&oct=</span><span style="background-color: #B2FFFF">[COLOR]</span><span style="background-color: #BBEE77">&ocl=</span><span style="background-color: #FFA500">[LOGO-URL]</span>"</strong>
        </p>
        <h3>Advanced Embedded Pages with Messaging</h3>
        <p>
        Using more advanced embedded pages with messaging can facilitate communication between your primary application and the embedded CRS application. This technique allows customer applications to react to changes and events in the CRS application.
        </p>
        <p>
        The customer needs to implement AJAX preauth token generation function; the “getData” implementation shown in the <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Sample files</a> only works in the testing environment and will not work in production. True user authentication and processing must be done server-side.
        </p>
        <p>
        <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Sample files</a> show possible usage and event handling.
        </p>
        <h3>API Process Flow</h3>
        <p>
        A token from /direct/login is required for all other <a href="/tag/direct-controller">Direct API</a> end-points in yellow.
        It is a bearer authorization token.
        </p>
        <p>
        Once you have a preauth token, returned from /direct/user-reg or /direct/preauth-token, pass it to the Web UI entry point in the embedded iFrame.
        </p>
        <p>
        Be sure to <strong>save the ID</strong> returned from /direct/user-reg or you won’t be able to reauthorize the user when they return.
        </p>
        <p>
        **<em>The preauth token is only valid for 30 seconds</em>
        </p>
        <p>
        The Web Widget must perform the necessary exchange of information via the corresponding APIs. This diagram shows the API process flow.
        </p>
        <p>
        <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fapi_process_flow.png" style="display:flex; margin:auto; max-width: 45vw;"/>
        </p>
        <h3>B2C Communication & Token Flow</h3>
        <p>
        The diagram shows the communication exchange that must occur between the consumer, your servers (marked Customer Servers), CRS servers (marked CRS Tech Servers) and the Equifax Servers.
        </p>
        <p>
        <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fb2c_communcation_and_token_flow.png" style="display:flex; margin:auto; max-width: 45vw;"/>
        </p>
        <h3>Webhook Integration</h3>
        <p>
        Webhooks are available to notify you when an alert (or other notifications) comes in so that you can message users in whatever fashion you wish to return to your site.
        </p>
        <p>
        Please refer to additional details on <a href="/tag/Webhook-Integration">Webhook Integration</a>.
        </p>
        <h3>Web Messaging Integration</h3>
        <p>
        To interact with the Consumer Credit Widget, you will need to implement a structure using a window event listener.
        </p>
        <p>
        Please refer to additional details on <a href="/tag/Web-Messaging-Integration">Web Messaging Integration</a>.
        </p>
        <h3>Postman Collections</h3>
        <p>
        <a href="/tag/Sandbox">Access Credentials</a> have been sent to you in a Postman Environment upon registration via email. The Postman Environment is pre-configured to allow you to use the scripts and walk through the Postman Scripts with minimal intervention to aid in understanding the API call structure.
        </p>
        <p>
        Consumer Credit <a href="/tag/Postman-Collections">Postman Collections</a> include pre-defined API calls to help you understand and develop your solution. See the <a href="/tag/Postman-Collections">Test API Postman Collection</a> for additional documentation.
        </p>
        <h3>Samples</h3>
        <p>
        Here is an implementation of the Sample iFrame page with inline user token&#58;
        <div onload="doHighlight();"> 
        <pre><code class="language-html" id="iframe_sample.html">
        &lt;html>
          &lt;head>
              &lt;title>CRS&lt;/title>
              &lt;meta name="description" content="CRS Consumer Credit Reports"/>
              &lt;link rel="icon" href="/favicon.ico">
              &lt;style>
                  body { background: #F9FAFB; }
                  #sc-iframe { border: none; overflow: hidden; padding: 0px; margin: 0px; width: 100%; height: 100vh; z-index: 1; position: absolute; left: 0; top: 0; }
              &lt;/style>
          &lt;/head>
          &lt;body>
              &lt;iframe id="sc-iframe" 
                  src=“https://efx-dev.stitchcredit.com/login-direct?key=[API-KEY]&token=[PREAUTH-TOKEN]&ocf=[FLAGS] &oct=[COLOR]&ocl=[LOGO-URL]”     
                  width=“100%” height=“100vh” frameborder=“0”>
              &lt;/iframe>
          &lt;/body>
        &lt;/html>
        </code></pre>
        </div>
        </p>
        <p>
        Here is a sample implementation of an advanced embedded page with messaging&#58; the Tabbed User Interface with Dynamic Consumer Authentication integration (<em>direct_sample.html</em>):
        <div style="max-height: 60vh;overflow: scroll;display: unset;" onload="doHighlight();"> 
        <pre><code class="language-html" id="direct_sample.html">
        &lt;html&gt;
          &lt;head&gt;
            &lt;title&gt;CRS&lt;/title&gt;
            &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
            &lt;meta name=&quot;description&quot; content=&quot;CRS Consumer Credit Reports&quot; /&gt;
            &lt;meta
              name=&quot;viewport&quot;
              content=&quot;minimum-scale=1, initial-scale=1, width=device-width&quot;
            /&gt;
            &lt;style&gt;
              html,
              body &lbrace;
                margin: 0;
                padding: 0;
                position: relative;
                background: #eeeeee;
              &rbrace;
              #sc-iframe &lbrace;
                margin: 0;
                padding: 0;
                z-index: 1;
                width: 100%;
                height: 100vh;
                border: none;
                overflow: hidden;
              &rbrace;
            &lt;/style&gt;
          &lt;/head&gt;
          &lt;body&gt;
            &lt;iframe
              id=&quot;sc-iframe&quot; allowTransparency=&quot;true&quot;
              src=&quot;https://efx-dev.stitchcredit.com/login-direct?key=5a10e0d7-1dc8-4325-929f-d0d131990527&ocf=2039&quot;
            &gt;&lt;/iframe&gt;
            &lt;script&gt;
            //this just throws in a default ID if one isn&apos;t provided on the query string
            const id = document.location.search.length &gt; 0 ? document.location.search.split(&apos;&&apos;)[0].split(&apos;=&apos;)[1] : &apos;048741d2-3dcf-4892-8fb0-99930a540cc1&apos;;
            console.log(&quot;ID: &quot;,id);
            console.log(&quot;Loading Message Listener...&quot;);

            window.addEventListener(&quot;message&quot;, receiveMessage, false);

            function receiveMessage(event) &lbrace;
                if(event &amp;&amp; event.source &amp;&amp; event.data) &lbrace;
                    // You only need to implement the types that are important/relevant to your use case.
                    if(event.data.type === &apos;AUTH_REQUIRED&apos;) &lbrace;
                        //The iframe clident will post this message when a valid preauth token does not exist.
                        //Posting a proper message with a preauth token in response allows the client to continue seemlessly.
                        //console.log(&quot;Auth Required Event Received&quot;);
                        const es = event.source;
                        //this code uses a test endpoint on the server to provide a preauth-token for any user ID without the usual hurdles.
                        //This is ONLY for testing and does not exist in the production environment.
                        getData(&quot;https://efx-dev.stitchcredit.com/api/test/preauth-token/&quot;+id, function() &lbrace;
                            const token = JSON.parse(this.responseText).token;
                            console.log(&quot;Status: &quot;, this.status, &quot;, token: &quot;, token);
                            es.postMessage(&lbrace;type: &apos;PREAUTH&apos;, token: this.status == 200 ? token : null&rbrace;,&quot;*&quot;);
                        &rbrace;);
                    &rbrace;
                    else if(event.data.type === &apos;REG_STARTED&apos;) &lbrace;
                        const es = event.source;
                        //only valid for full web implementation, Direct API already creates the customer, so this will never happen in those instances
                // (new Date().valueOf()) - is used to generate a new email ID on the fly for testing purposes
                        es.postMessage(&lbrace;type: &apos;REG&apos;, data: &lbrace;fname:&quot;Gertrude&quot;, lname:&quot;Harkenreadeo&quot;, email: &quot;test+&quot; + (new Date().valueOf()) + &quot;@test.com&quot;&rbrace;&rbrace;,&quot;*&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;IDENTITY_STARTED&apos;) &lbrace;
                        const es = event.source;
                        //You could use this function to pre-populate the given fields.  DoB and SSN will never be prepopulated as it violates compliance
                // new Date().valueOf().toString() - generates a unique number for street2 to ensure each run goes through the full identity process, remove to test sequential sign up of the same user
                        es.postMessage(&lbrace;type: &apos;IDENTITY&apos;, data: &lbrace;street1:&quot;305 Linden Av&quot;, street2: new Date().valueOf().toString(), city: &quot;Atlanta&quot;, state: &quot;GA&quot;, zip: &quot;30316&quot;, mobile: &quot;0000000000&quot;&rbrace;&rbrace;,&quot;*&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;LOGIN_SUCCESSFUL&apos;) &lbrace;
                        console.log(&quot;User succesfully logged in&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;LOGIN_FAILED&apos;) &lbrace;
                        //if you see this message more than a few times in a row, it&apos;s likely an issue
                        //typically this will only occur for full web implementations, not Direct API
                        console.log(&quot;User login failed&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;USER_ENROLLED&apos;) &lbrace;
                        //User successfully completed identity and has been enrolled for consumer data
                        console.log(&quot;User enrollment successful&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;IDENTITY_FAILED&apos;) &lbrace;
                        //Identity process failed, user is likely &quot;stuck&quot; as they cannot continue
                        console.log(&quot;User identity failure&quot;);
                    &rbrace;
                    else if(event.data.type === &apos;SERVICE_FAILURE&apos;) &lbrace;
                        //Identity process failed most likely due to a service outage, but the user is stuck as they cannot continue without passing identity
                        console.log(&quot;Identity service failure&quot;);
                    &rbrace;
                &rbrace;

                function getData(req, action) &lbrace;
                var xhr = new XMLHttpRequest();
                    xhr.responesType = &apos;json&apos;;
                    xhr.onload = action;
                    xhr.open(&quot;GET&quot;, req);
                    xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
                    xhr.send();
                &rbrace;
            &rbrace;
            &lt;/script&gt;
          &lt;/body&gt;
        &lt;/html&gt;
        </code></pre>
        </div>
        </p>
        <p>
        Here is a sample implementation of an advanced embedded page with messaging: All-in-One User Interface with dynamic Consumer Authentication integration (<em>aio_sample.html</em>):
        <div style="max-height: 60vh;overflow: scroll;display: unset;" onload="doHighlight();"> 
        <pre><code class="language-html" id="aio_sample.html">
        &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;StitchCredit&lt;/title&gt;
          &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
          &lt;meta name=&quot;description&quot; content=&quot;StitchCredit Consumer Credit Reports&quot; /&gt;
          &lt;meta
            name=&quot;viewport&quot;
            content=&quot;minimum-scale=1, initial-scale=1, width=device-width&quot;
          /&gt;
          &lt;style&gt;
            html,
            body &lbrace;
              margin: 0;
              padding: 0;
              position: relative;
              background: #eeeeee;
            &rbrace;
            #sc-iframe &lbrace;
              margin: 0;
              padding: 0;
              z-index: 1;
              width: 100%;
              height: 100vh;
              border: none;
              overflow: hidden;
            &rbrace;
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;iframe
            id=&quot;sc-iframe&quot; allowTransparency=&quot;true&quot;
            src=&quot;https://efx-dev.stitchcredit.com/login-aio?key=5a10e0d7-1dc8-4325-929f-d0d131990527&amp;ocf=2039&quot;
          &gt;&lt;/iframe&gt;
          &lt;script&gt;
          //this just throws in a default ID if one isn&apos;t provided on the query string
          const id = document.location.search.length &gt; 0 ? document.location.search.split(&apos;&amp;&apos;)[0].split(&apos;=&apos;)[1] : &apos;988a6fd7-7297-4757-8b96-907daa14a1f6&apos;;
          console.log(&quot;ID: &quot;,id);
          console.log(&quot;Loading Message Listener...&quot;);

          window.addEventListener(&quot;message&quot;, receiveMessage, false);

          function receiveMessage(event) &lbrace;
              if(event &amp;&amp; event.source &amp;&amp; event.data) &lbrace;
                  // You only need to implement the types that are important/relevant to your use case.
                  if(event.data.type === &apos;AUTH_REQUIRED&apos;) &lbrace;
                      //The iframe clident will post this message when a valid preauth token does not exist.
                      //Posting a proper message with a preauth token in response allows the client to continue seemlessly.
                      //console.log(&quot;Auth Required Event Received&quot;);
                      const es = event.source;
                      //this code uses a test endpoint on the server to provide a preauth-token for any user ID without the usual hurdles.
                      //This is ONLY for testing and does not exist in the production environment.
                      getData(&quot;https://efx-dev.stitchcredit.com/api/test/preauth-token/&quot;+id, function() &lbrace;
                          const token = JSON.parse(this.responseText).token;
                          console.log(&quot;Status: &quot;, this.status, &quot;, token: &quot;, token);
                          es.postMessage(&lbrace;type: &apos;PREAUTH&apos;, token: this.status == 200 ? token : null&rbrace;,&quot;*&quot;);
                      &rbrace;);
                  &rbrace;
                  else if(event.data.type === &apos;REG_STARTED&apos;) &lbrace;
                      const es = event.source;
                      //only valid for full web implementation, Direct API already creates the customer, so this will never happen in those instances
              // (new Date().valueOf()) - is used to generate a new email ID on the fly for testing purposes
                      es.postMessage(&lbrace;type: &apos;REG&apos;, data: &lbrace;fname:&quot;Gertrude&quot;, lname:&quot;Harkenreadeo&quot;, email: &quot;test+&quot; + (new Date().valueOf()) + &quot;@test.com&quot;&rbrace;&rbrace;,&quot;*&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;IDENTITY_STARTED&apos;) &lbrace;
                      const es = event.source;
                      //You could use this function to pre-populate the given fields.  DoB and SSN will never be prepopulated as it violates compliance
              // new Date().valueOf().toString() - generates a unique number for street2 to ensure each run goes through the full identity process, remove to test sequential sign up of the same user
                      es.postMessage(&lbrace;type: &apos;IDENTITY&apos;, data: &lbrace;street1:&quot;305 Linden Av&quot;, street2: new Date().valueOf().toString(), city: &quot;Atlanta&quot;, state: &quot;GA&quot;, zip: &quot;30316&quot;, mobile: &quot;0000000000&quot;&rbrace;&rbrace;,&quot;*&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;LOGIN_SUCCESSFUL&apos;) &lbrace;
                      console.log(&quot;User succesfully logged in&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;LOGIN_FAILED&apos;) &lbrace;
                      //if you see this message more than a few times in a row, it&apos;s likely an issue
                      //typically this will only occur for full web implementations, not Direct API
                      console.log(&quot;User login failed&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;USER_ENROLLED&apos;) &lbrace;
                      //User successfully completed identity and has been enrolled for consumer data
                      console.log(&quot;User enrollment successful&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;IDENTITY_FAILED&apos;) &lbrace;
                      //Identity process failed, user is likely &quot;stuck&quot; as they cannot continue
                      console.log(&quot;User identity failure&quot;);
                  &rbrace;
                  else if(event.data.type === &apos;SERVICE_FAILURE&apos;) &lbrace;
                      //Identity process failed most likely due to a service outage, but the user is stuck as they cannot continue without passing identity
                      console.log(&quot;Identity service failure&quot;);
                  &rbrace;
              &rbrace;

              function getData(req, action) &lbrace;
              var xhr = new XMLHttpRequest();
                  xhr.responesType = &apos;json&apos;;
                  xhr.onload = action;
                  xhr.open(&quot;GET&quot;, req);
                  xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
                  xhr.send();
              &rbrace;

          &rbrace;
          &lt;/script&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        </code></pre>
        </div>
        </p>
        <p>
        Here is a sample implementation of an advanced embedded page with messaging: Tile User Interface with dynamic Consumer Authentication integration (<em>tile_sample.html</em>):
        <div style="max-height: 60vh;overflow: scroll;display: unset;" onload="doHighlight();"> 
        <pre><code class="language-html" id="tile_sample.html">
        &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;CRS&lt;/title&gt;
          &lt;link rel=&apos;icon&apos; href=&apos;/favicon.ico&apos; /&gt;
          &lt;meta name=&apos;description&apos; content=&apos;CRS Consumer Credit Reports&apos; /&gt;
          &lt;meta
          name=&apos;viewport&apos;
          content=&apos;minimum-scale=1, initial-scale=1, width=device-width&apos;
          /&gt;
          &lt;style&gt;
          html,
          body &lbrace;
            margin: 0;
            padding: 0;
            position: relative;
            background: #eeeeee;
          &rbrace;
          #sc-iframe &lbrace;
            display:block;
            margin: 0 auto;
            padding: 0;
            z-index: 1;
            width: 500px;
            height: 675px;
            border: none;
            overflow: hidden;
          &rbrace;
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;iframe
          id=&apos;sc-iframe&apos; allowTransaparency=&apos;true&apos;
          src=&apos;https://efx-dev.stitchcredit.com/login-tile?key=5a10e0d7-1dc8-4325-929f-d0d131990527&ocf=2039&apos;
          &gt;&lt;/iframe&gt;
          &lt;script&gt;
          //this just throws in a default ID if one isn&apos;t provided on the query string
          const id = document.location.search.length &gt; 0 ? document.location.search.split(&apos;&&apos;)[0].split(&apos;=&apos;)[1] : &apos;988a6fd7-7297-4757-8b96-907daa14a1f6&apos;;
          console.log(&apos;ID: &apos;,id);
          console.log(&apos;Loading Message Listener...&apos;);

          window.addEventListener(&apos;message&apos;, receiveMessage, false);

          function receiveMessage(event) &lbrace;
            if(event &amp;&amp; event.source &amp;&amp; event.data) &lbrace;
              // You only need to implement the types that are important/relevant to your use case.
              if(event.data.type === &apos;AUTH_REQUIRED&apos;) &lbrace;
                //The iframe clident will post this message when a valid preauth token does not exist.
                //Posting a proper message with a preauth token in response allows the client to continue seemlessly.
                //console.log(&apos;Auth Required Event Received&apos;);
                const es = event.source;
                //this code uses a test endpoint on the server to provide a preauth-token for any user ID without the usual hurdles.
                //This is ONLY for testing and does not exist in the production environment.
                getData(&apos;https://efx-dev.stitchcredit.com/api/test/preauth-token/&apos;+id, function() &lbrace;
                  const token = JSON.parse(this.responseText).token;
                  console.log(&apos;Status: &apos;, this.status, &apos;, token: &apos;, token);
                  es.postMessage(&lbrace;type: &apos;PREAUTH&apos;, token: this.status == 200 ? token : null&rbrace;,&apos;*&apos;);
                &rbrace;);
              &rbrace;
              else if(event.data.type === &apos;REG_STARTED&apos;) &lbrace;
                const es = event.source;
                //only valid for full web implementation, Direct API already creates the customer, so this will never happen in those instances
            // (new Date().valueOf()) - is used to generate a new email ID on the fly for testing purposes
                es.postMessage(&lbrace;type: &apos;REG&apos;, data: &lbrace;fname:&apos;Gertrude&apos;, lname:&apos;Harkenreadeo&apos;, email: &apos;test+&apos; + (new Date().valueOf()) + &apos;@test.com&apos;&rbrace;&rbrace;,&apos;*&apos;);
              &rbrace;
              else if(event.data.type === &apos;IDENTITY_STARTED&apos;) &lbrace;
                const es = event.source;
                //You could use this function to pre-populate the given fields.  DoB and SSN will never be prepopulated as it violates compliance
            // new Date().valueOf().toString() - generates a unique number for street2 to ensure each run goes through the full identity process, remove to test sequential sign up of the same user
                es.postMessage(&lbrace;type: &apos;IDENTITY&apos;, data: &lbrace;street1:&apos;305 Linden Av&apos;, street2: new Date().valueOf().toString(), city: &apos;Atlanta&apos;, state: &apos;GA&apos;, zip: &apos;30316&apos;, mobile: &apos;0000000000&apos;&rbrace;&rbrace;,&apos;*&apos;);
              &rbrace;
              else if(event.data.type === &apos;LOGIN_SUCCESSFUL&apos;) &lbrace;
                console.log(&apos;User succesfully logged in&apos;);
              &rbrace;
              else if(event.data.type === &apos;LOGIN_FAILED&apos;) &lbrace;
                //if you see this message more than a few times in a row, it&apos;s likely an issue
                //typically this will only occur for full web implementations, not Direct API
                console.log(&apos;User login failed&apos;);
              &rbrace;
              else if(event.data.type === &apos;USER_ENROLLED&apos;) &lbrace;
                //User successfully completed identity and has been enrolled for consumer data
                console.log(&apos;User enrollment successful&apos;);
              &rbrace;
              else if(event.data.type === &apos;IDENTITY_FAILED&apos;) &lbrace;
                //Identity process failed, user is likely &apos;stuck&apos; as they cannot continue
                console.log(&apos;User identity failure&apos;);
              &rbrace;
              else if(event.data.type === &apos;SERVICE_FAILURE&apos;) &lbrace;
                //Identity process failed most likely due to a service outage, but the user is stuck as they cannot continue without passing identity
                console.log(&apos;Identity service failure&apos;);
              &rbrace;
            &rbrace;

            function getData(req, action) &lbrace;
            var xhr = new XMLHttpRequest();
              xhr.responesType = &apos;json&apos;;
              xhr.onload = action;
              xhr.open(&apos;GET&apos;, req);
              xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);
              xhr.send();
            &rbrace;

          &rbrace;
          &lt;/script&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        </code></pre>
        </div> 
        </p>
        <p>
        Here is a sample implementation of an advanced embedded page with messaging: Tile User Interface with dynamic Consumer Authentication integration and configuration display flags override (<em>tile_sample_score_only.html</em>):
        <div style="max-height: 60vh;overflow: scroll;display: unset;" onload="doHighlight();"> 
        <pre><code class="language-html" id="tile_sample_score_only.html">
        &lt;html&gt;
        &lt;head&gt;
          &lt;title&gt;StitchCredit&lt;/title&gt;
          &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;
          &lt;meta name=&quot;description&quot; content=&quot;StitchCredit Consumer Credit Reports&quot; /&gt;
          &lt;meta
          name=&quot;viewport&quot;
          content=&quot;minimum-scale=1, initial-scale=1, width=device-width&quot;
          /&gt;
          &lt;style&gt;
          html,
          body &lbrace;
            margin: 0;
            padding: 0;
            position: relative;
            background: #eeeeee;
          &rbrace;
          #sc-iframe &lbrace;
            display:block;
            margin: 0 auto;
            padding: 0;
            z-index: 1;
            width: 500px;
            height: 550px;
            border: none;
            overflow: hidden;
          &rbrace;
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;iframe
          id=&quot;sc-iframe&quot; allowTransaparency=&quot;true&quot;
          src=&quot;https://efx-dev.stitchcredit.com/login-tile?key=5a10e0d7-1dc8-4325-929f-d0d131990527&amp;ocf=1&quot;
          &gt;&lt;/iframe&gt;
          &lt;script&gt;
          //this just throws in a default ID if one isn&apos;t provided on the query string
          const id = document.location.search.length &gt; 0 ? document.location.search.split(&apos;&amp;&apos;)[0].split(&apos;=&apos;)[1] : &apos;988a6fd7-7297-4757-8b96-907daa14a1f6&apos;;
          console.log(&quot;ID: &quot;,id);
          console.log(&quot;Loading Message Listener...&quot;);

          window.addEventListener(&quot;message&quot;, receiveMessage, false);

          function receiveMessage(event) &lbrace;
            if(event &amp;&amp; event.source &amp;&amp; event.data) &lbrace;
              // You only need to implement the types that are important/relevant to your use case.
              if(event.data.type === &apos;AUTH_REQUIRED&apos;) &lbrace;
                //The iframe clident will post this message when a valid preauth token does not exist.
                //Posting a proper message with a preauth token in response allows the client to continue seemlessly.
                //console.log(&quot;Auth Required Event Received&quot;);
                const es = event.source;
                //this code uses a test endpoint on the server to provide a preauth-token for any user ID without the usual hurdles.
                //This is ONLY for testing and does not exist in the production environment.
                getData(&quot;https://efx-dev.stitchcredit.com/api/test/preauth-token/&quot;+id, function() &lbrace;
                  const token = JSON.parse(this.responseText).token;
                  console.log(&quot;Status: &quot;, this.status, &quot;, token: &quot;, token);
                  es.postMessage(&lbrace;type: &apos;PREAUTH&apos;, token: this.status == 200 ? token : null&rbrace;,&quot;*&quot;);
                &rbrace;);
              &rbrace;
              else if(event.data.type === &apos;REG_STARTED&apos;) &lbrace;
                const es = event.source;
                //only valid for full web implementation, Direct API already creates the customer, so this will never happen in those instances
            // (new Date().valueOf()) - is used to generate a new email ID on the fly for testing purposes
                es.postMessage(&lbrace;type: &apos;REG&apos;, data: &lbrace;fname:&quot;Gertrude&quot;, lname:&quot;Harkenreadeo&quot;, email: &quot;test+&quot; + (new Date().valueOf()) + &quot;@test.com&quot;&rbrace;&rbrace;,&quot;*&quot;);
              &rbrace;
              else if(event.data.type === &apos;IDENTITY_STARTED&apos;) &lbrace;
                const es = event.source;
                //You could use this function to pre-populate the given fields.  DoB and SSN will never be prepopulated as it violates compliance
            // new Date().valueOf().toString() - generates a unique number for street2 to ensure each run goes through the full identity process, remove to test sequential sign up of the same user
                es.postMessage(&lbrace;type: &apos;IDENTITY&apos;, data: &lbrace;street1:&quot;305 Linden Av&quot;, street2: new Date().valueOf().toString(), city: &quot;Atlanta&quot;, state: &quot;GA&quot;, zip: &quot;30316&quot;, mobile: &quot;0000000000&quot;&rbrace;&rbrace;,&quot;*&quot;);
              &rbrace;
              else if(event.data.type === &apos;LOGIN_SUCCESSFUL&apos;) &lbrace;
                console.log(&quot;User succesfully logged in&quot;);
              &rbrace;
              else if(event.data.type === &apos;LOGIN_FAILED&apos;) &lbrace;
                //if you see this message more than a few times in a row, it&apos;s likely an issue
                //typically this will only occur for full web implementations, not Direct API
                console.log(&quot;User login failed&quot;);
              &rbrace;
              else if(event.data.type === &apos;USER_ENROLLED&apos;) &lbrace;
                //User successfully completed identity and has been enrolled for consumer data
                console.log(&quot;User enrollment successful&quot;);
              &rbrace;
              else if(event.data.type === &apos;IDENTITY_FAILED&apos;) &lbrace;
                //Identity process failed, user is likely &quot;stuck&quot; as they cannot continue
                console.log(&quot;User identity failure&quot;);
              &rbrace;
              else if(event.data.type === &apos;SERVICE_FAILURE&apos;) &lbrace;
                //Identity process failed most likely due to a service outage, but the user is stuck as they cannot continue without passing identity
                console.log(&quot;Identity service failure&quot;);
              &rbrace;
            &rbrace;

            function getData(req, action) &lbrace;
            var xhr = new XMLHttpRequest();
              xhr.responesType = &apos;json&apos;;
              xhr.onload = action;
              xhr.open(&quot;GET&quot;, req);
              xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
              xhr.send();
            &rbrace;

          &rbrace;
          &lt;/script&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        </code></pre>
        </div>
        </p>
        <h4>Responsiveness Breakpoints</h4>
          <p>
          These are two main breakpoints we use to scale desktop, tablet, and mobile devices. Devices with a width larger than 960px will be treated as a desktop view, devices with smaller widths fall under tablet and mobile device scaling thus will be displayed as a mobile view. With that being said, the widget should scale well on small, medium, and large devices without issues.
          </p>
          <p>
          Each breakpoint (a key) matches with a fixed screen width (a value):
          <ul>
            <li>sm, small: 600px</li>
            <li>md, medium: 960px</li>
          </ul>
          </p>

- name: DevTools - API Integration for Custom Web or Mobile App
  x-displayName: API Integration for Custom Web or Mobile App
  description: |
        <p>
        The 3rd Integration option is for customers who want to create their own UI, such as a website or mobile app, entirely using the CRS Consumer Credit API. User authentication is managed by the website or in the app.
        </p>

        <h3>Overview</h3>
        <p>
        The 3rd Integration option is for customers who want to create their own UI, such as a website or mobile app, entirely using the CRS Consumer Credit API. User authentication is managed by the website or in the app.
        </p>
        <p>
        All custom screens created using the API require Equifax approval (see the compliance guide for approval guidelines). (Option 3 - API Integration for Custom Web or Mobile App)
        </p>
        <p>
        With this option, you can create your own user experience for connecting your users to their credit data by leveraging the same B2C API that the widget is utilizing.
        </p>
        <h3>App Integration</h3>
        <h4>Sign-up / Registration Terms of Use</h4>

        <strong>Consumers must agree to CRS’s Terms of Use and Privacy Policy <em>prior to the Identity process</em></strong>
        <blockquote>
        <p>By clicking "Register” and creating an account you accept CRS’s <a href="https://efx-dev.stitchcredit.com/terms-of-use" title="Terms of use">Terms of Use</a> and <a href="https://efx-dev.stitchcredit.com/privacy-policy">Privacy Policy</a>. CRS does not maintain critical personal data, much less sell or otherwise disclose your personal information to anyone else. You may opt-out of email correspondence, except confirmation Emails, which often contain important information about your account.</p>
        </blockquote>
        Linking to the Following Terms of Use and Privacy Policy is advised to maintain the latest verbiage
        <ul>
        <li>CRS Terms of Use <a href="https://app.termly.io/embed/terms-of-use/cd8446e8-9910-4a02-8f7c-36d9921a3bc7">https://app.termly.io/embed/terms-of-use/cd8446e8-9910-4a02-8f7c-36d9921a3bc7</a>
        </li>

        <li>CRS Privacy Policy <a href="https://app.termly.io/embed/terms-of-use/958f774c-a642-41e7-9696-7ac060bdf44c">https://app.termly.io/embed/terms-of-use/958f774c-a642-41e7-9696-7ac060bdf44c</a>
        </li>
        </ul>
        NOTE: linking to the above Terms of Use and Privacy Policy is advised to maintain the latest verbiage
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094648-96573000-5a72-11eb-9429-6b84ba036804.png" alt="Image of page example for Sign Up" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094606-83446000-5a72-11eb-83c7-df5d4ba541ae.png" alt="Image of page example for Registering Terms of Use" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Login</h4>

        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094441-4aa48680-5a72-11eb-86c9-9a9e7a64ed90.png" alt="Image of credit report page example" style="width:50%; margin-top: -12%;" class="crop" />
          </div>
        </div>

        <h4>Identity</h4>

        <p>Consumers must be notified and express specific consent to access third party data to verify identity</p>
        <p>Required Identity Consent language:</p>
        <blockquote>
        <p>You understand that by clicking “Continue”, you are explicitly agreeing to and providing “written instructions” to CRS under the Fair Credit Reporting Act to obtain your credit information from one or more of the three nationwide credit reporting agencies. Third-party sources, including your mobile carrier may be used to verify your identity. You authorize CRS to obtain such information for you to confirm your identity, and, for as long as you are a member of CRS, to provide you with your credit information. You may elect to terminate your account and this authorization at any time.</p>
        </blockquote>
        <div class="row crop" style="display: flex" class="crop">
        <div class="column" style="flex: 50%; padding: 5px;">
          <img src="https://user-images.githubusercontent.com/76128486/105093444-c0a7ee00-5a70-11eb-85ef-b4a17e4c2b45.png" alt="Image of identity page example" style="width:100%" class="crop" />
        </div>
        <div class="column" style="flex: 50%; padding: 5px;">
          <img src="https://user-images.githubusercontent.com/76128486/105093564-edf49c00-5a70-11eb-8d03-c46d83010b07.png" alt="Image of page example for consumer consent language" style="width:100%" class="crop" />
        </div>
        </div>

        <h4>Identification (option 1): mobile</h4>

        <p>Mobile Identity Consent language: </p>
        <blockquote>
        <p>
        Users must consent to receiving an SMS message for authentication – note that not all users will qualify to do mobile identification, roughly 60% do at the moment.
        </p>
        <p>We will attempt to verify your identity by sending a text with a one-time code to your mobile phone number ending in xxxx.</p>
        </blockquote>
        <blockquote>
        <p>Message and data rates may apply.</p>
        </blockquote>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093896-6f4c2e80-5a71-11eb-9185-1a2b78596470.png" alt="Image of page for sending code via SMS to verify identity" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093817-504d9c80-5a71-11eb-8334-7e2ecb8d0129.png" alt="Image of page for entering identity verifying code via SMS" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Identification (option 2): quiz</h4>
        <p>
        Users who don’t qualify or are unable to pass mobile verification must pass an identity quiz. Users will have at most 2 chances to pass a quiz, assuming enough questions can be generated. Users may re-enter and try to pass the identity quiz again, however two attempts (2 chances each) is the limit and will result in a 72-hr lockout.
        </p>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093707-2ac09300-5a71-11eb-9abd-8c89bd399057.png" alt="Image of page for identification quiz" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093655-17adc300-5a71-11eb-96e3-d8a3162a2349.png" alt="Image of page for successful sign up as a result of successful identification" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Score - Dashboard</h4>
        <p>
        The provider of the score is required – do not use a logo, you must have marketing approval from a bureau to use their logo. 
        <strong>VantageScore&reg; 3.0 using Equifax Data</strong> – must be present, just like that (VantageScore is one word and it’s a brand, ignore the mistake in this image). The date the score was pulled is required. The date the next score will be available is strongly encouraged, this is based on the weekly or monthly refresh you subscribe to VantageScore&reg; 3.0 is known as an “educational score” and may differ from the FICO&reg; Score used to determine credit availability – notice must be given

        </p>

        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093416-b4239580-5a70-11eb-8e00-193613850be6.png" alt="Image of page for showing dashboard of scores returned by various bureaus" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093301-80e10680-5a70-11eb-99a3-e4b868dce698.png" alt="Image of page for showing score returned by a single bureaus" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Report</h4>
        <p>
        The provider of the report is required. The date the report was pulled is required.
        </p>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094067-b508f700-5a71-11eb-94f0-5b72489546fe.png" alt="Image of page for showing report summary" style="width:100%" class="crop" />
          </div>
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105094037-a6224480-5a71-11eb-8f45-31cf52bd78a2.png" alt="Image of page for showing score credit accounts" style="width:100%" class="crop" />
          </div>
        </div>

        <h4>Credit Monitoring</h4>
        <p>
        The provider of the alert is required. The date the alert is required.
        </p>

        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093951-83902b80-5a71-11eb-8989-31bacb070fa2.png" alt="Image of page showing credit monitoring" style="width:50%; margin-top: -8%;" class="crop" />
          </div>
        </div>

        <h4>Identity Restoration</h4>

        <p>
        This product content must be delivered as is.
        </p>
        <p>
        <strong>Equifax&reg; ID Restoration</strong><br>
        Has your identity been compromised?<br>
        <ul>
        <li>A specialist will help you work through the process.</li>
        <li>Once your issues are resolved, we continue to monitor the situation for three months.</li>
        <li>Call today so that we may help you verify and begin resolving any discrepancies.</li>
        <li>Call 1-877-368-4940 today to get started</li>
        </ul>
        </p>
        <div class="row crop" style="display: flex">
          <div class="column" style="flex: 50%; padding: 5px;">
            <img src="https://user-images.githubusercontent.com/76128486/105093759-3b710900-5a71-11eb-9f72-e67e6bba79d9.png" alt="Image of page showing ID restoration" style="width:50%; margin-top: -8%;" class="crop" />
          </div>
        </div>

        <h3>API Process Flow</h3>
        <p>
        Your custom application must perform the necessary exchange of information via the corresponding APIs. This diagram shows the API process flow.
        </p>
        <p>
        <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fapi_process_flow.png" style="display:flex; margin:auto; max-width: 45vw;"/>
        </p>

        <h3>B2C Communication & Token Flow</h3>
        <p>
        The diagram shows the communication exchange that must occur between the consumer, your servers (marked Customer Servers), CRS servers (marked CRS Tech Servers) and the Equifax Servers.
        </p>
        <p>
        <img src="https://api.redoc.ly/registry/assets/crs-group/B2C/v2/assets%2fimgs%2fb2c_communcation_and_token_flow.png" style="display:flex; margin:auto; max-width: 45vw;"/>
        </p>

        <h3>Compliance</h3>
        <p>
        Consumers must always know who they are dealing with. Content delivered to users must not be misleading in any way. Consumers must know where the data came from. Pages with consumer credit data must be compliant with all data presentation requirements and restrictions, no matter how small.
        </p>
        <p>
        Login security must be present:
        <ul>
        <li>Account lockout after 5 consecutive failed attempts</li>
        <li>Multi-step account recovery process</li>
        </ul>
        </p>
        <p>
        Customers may not access consumer data at any time. Saving data at any time is NOT PERMITTED under any circumstances.
        </p>
        <p>
        Terms of Use and Privacy Policy are from and through CRS – there is no ability to white label this at this time.
        </p>

        <h3>Webhook Integration</h3>
        <p>
        Webhooks are available to notify you when an alert (or other notifications) comes in so that you can message users in whatever fashion you wish to return to your site.
        </p>
        <p>
        Please refer to additional details on <a href="/tag/Webhook-Integration">Webhook Integration</a>.
        </p>
        <hr>

        <h3>Managing Users</h3>
        <p>
        The basic steps to create a new user and manage returning users, including data access:
        <ol>
        <li>NEW USERS</li>
          <ol>
          <li><a href="/tag/direct-controller">Direct API</a>
            <ol>
            <li>Customer Login</li>
            <li>Register New User: Be sure to save the userId when Registering a New User or you will not be able to generate a returning token for the user</li>
            </ol>
          </li>
          <li><a href="/tag/user-controller">User API</a>
            <ol>
            <li>Preauth Token</li>
            <li>User Identity</li>
            <li>Phone Verify</li>
            <li>Send Mobile Code</li>
            <li>Verify Mobile Code</li>
            <li>Get EFX Config</li>
            </ol>
          </li>
          <li><a href="/tag/Equifax-API">Equifax API</a>
            <ol>
            <li>OAUTH Token</li>
            <li>Credit Score Latest</li>
            <li>Credit Score History</li>
            <li>Credit Report List</li>
            <li>Credit Report Summary</li>
            <li>Credit Report (First in list)</li>
            </ol>
          </li>
          </ol>
        <li>RETURNING USERS
          <ol>
          <li><a href="/tag/direct-controller">Direct API</a>
            <ol>
            <li>Customer Login</li>
            <li>New User Token</li>
            </ol>
          </li>
          <li><a href="/tag/user-controller">User API</a>
            <ol>
            <li>Preauth Token - if (idpass=false), the next four calls would need to be made, otherwise skip to Get EFX Config if true)</li>
            <li>User Identity</li>
            <li>Phone Verify</li>
            <li>Send Mobile Code</li>
            <li>Verify Mobile Code</li>
            <li>Get EFX Config</li>
            </ol>
          </li>
          <li><a href="/tag/Equifax-API">Equifax API</a>
            <ol>
            <li>OAUTH Token</li>
            <li>Credit Score Latest</li>
            <li>Credit Score History</li>
            <li>Credit Report List</li>
            <li>Credit Report Summary</li>
            <li>Credit Report (First in list)</li>
            </ol>
          </li>
          </ol>
        </li>
        </ol>
        <p>
        The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - New User.postman_collection.json</a> will walk you through these steps in order
        </p>
        <p>
        When creating creating a new user:
        </p>
        <p>Be sure to save the userId when Registering a New User or you will not be able to generate a returning token for the user. <em>As a matter of security, we do not allow the listing of user IDs.</em>
        </p>
        <p>
        Once you create a user the identity information is hashed and used to verify if the same identity is being re-enrolled.  If a matching hash is found it will skip the identification process.  This is great in production, but may limit your ability to test.  To get past this, just add a number to the USER_STREET_2 and increment it each time you register a new user and want to go through the full authentication process.
        </p>
        <p>
        In the test environment it is important that you use the User Test Identity provided to you <strong>verbatim</strong>.  You may change the email address and phone number <strong>ONLY</strong>.
        <p>
        Additional Notes:
        <ul>
          <li>On Register New User - change the email to your email.  You may add a +1, +2, etc to keep reusing the same email address (ex: test+1@test.com)</li>
          <li>On Register New User & User Identity - change the phone number to your mobile phone number or you won't receive the SMS messages.</li>
          <li>Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well.</li>
          <li>For the Get Identity Quiz and Verify Identity Quiz methods, you will need to find the correct answers and update the Verify Identity Quiz body accordingly to successfully authenticate using those methods.</li>
          <li>When registering a new user, be sure to save the userId or you will not be able to log that user in later.  As a matter of security, we do not allow the listing of user IDs.</li>
          <li>REMEMBER - you MUST use the test user data EXACTLY as it is provided.  Only the phone number and email should be changed.</li>
        </ul>
        </p>
        <hr>

        <h3>Postman Collections</h3>
        <p>
        <a href="/tag/Sandbox">Access Credentials</a> have been sent to you in a Postman Environment upon registration via email. The Postman Environment is pre-configured to allow you to use the scripts and walk through the Postman Scripts with minimal intervention to aid in understanding the API call structure.
        </p>
        <p>
        Consumer Credit <a href="/tag/Postman-Collections">Postman Collections</a> include pre-defined API calls to help you understand and develop your solution. See the <a href="/tag/Postman-Collections">Test API Postman Collection</a> for additional documentation.
        <ul>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Test API.postman_collection.json</a> includes some webhook tests to help you understand and develop your solution.  See the Test API scripts for additional documentation.</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - New User.postman_collection.json</a> will walk you through the Create New User steps in order</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - Returning User.postman_collection.json</a> will walk you through the Returning User steps in order</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - User API.postman_collection.json</a> provides all User-oriented APIs</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Direct API.postman_collection.json</a> will walk you through using the Direct API collection</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - EFX API.postman_collection.json</a> has examples for all Equifax APIs</li>
        </ul>
        In the <strong>test</strong> environment it is important that you use the User Test Identity provided to you verbatim. You may change the email address and phone number <strong>ONLY</strong>.
        </p>

- name: SDKs
  x-displayName: SDKs (under development)
  description: |
        <h3>Overview</h3>
        <p>
        <em>SDKs are currently under development -- so far we have:</em>
        <ul>
          <li><a href="https://github.com/StitchCredit/b2c-api-javascript" target="_blank"><em>javascript</em></a></li>
          <li><a href="https://github.com/StitchCredit/b2c-api-python" target="_blank"><em>python</em></a></li>
        </ul>
        </p>
        <h3>javascript</h3>
        <p>
        You will find an installation guide and a getting started guide for the SDK: EcreditDirectApi - JavaScript client for ecredit-direct-api CRS API.
        </p>
        <p>
        This is the the current SDK for <a href="https://github.com/StitchCredit/b2c-api-javascript" target="_blank"><em>javascript</em></a>
        </p>
        <h3>python</h3>
        <p>
        You will find a description of requirements, an installation & usage guide, and a getting started guide for the SDK: ecreditapi - python client for ecredit-direct-api CRS API.
        </p>
        <p>
        This is the the current SDK for <a href="https://github.com/StitchCredit/b2c-api-python" target="_blank"><em>python</em></a>
        </p>

- name: Consumer Credit API Setup
  description: |
        <p>
        The fastest way to get up and running with CRS's Consumer Credit APIs are to use the <a href="/tag/Postman-Collections">Postman Collections</a> that you can find in the next section plus your <a href="/tag/Sandbox">Access Credentials</a>. With this information, you can being your integration process and start testing with the CRS <a href="/tag/Sandbox">Sandbox</a> in no time at all.
        </p>

- name: Postman Collections
  description: |
        <p>
        The Postman Environment is pre-configured to allow you to use the scripts and walk through the Postman Scripts with minimal intervention to aid in understanding the API call structure.
        </p>
        <p>
        Consumer Credit <strong>Postman Collections</strong> include pre-defined API calls to help you understand and develop your solution. See the <a href="/tag/Postman-Collections">Test API Postman Collection</a> for additional documentation.
        <ul>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Test API.postman_collection.json</a> includes some webhook tests to help you understand and develop your solution.  See the <a href="/tag/Postman-Collections">Test API Postman Collection</a> for additional documentation.</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - New User.postman_collection.json</a> will walk you through the Create New User steps in order</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - Returning User.postman_collection.json</a> will walk you through the Returning User steps in order</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - User API.postman_collection.json</a> provides all User-oriented APIs</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Direct API.postman_collection.json</a> will walk you through using the Direct API collection</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - EFX API.postman_collection.json</a> has examples for all Equifax APIs</li>
        </ul>
        In the <strong>test</strong> environment it is important that you use the User Test Identity provided to you verbatim. You may change the email address and phone number <strong>ONLY</strong>.
        </p>

        <p><strong>Test APIs:</strong> Consumer Credit - Test API.postman_collection.json</p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - Test API.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - Test API.postman_collection.json -->
        <pre><code class="language-json" id="test_api_postman_collection">
        {
          "info": {
            "_postman_id": "ecfa55bb-7382-4439-ae40-8916233c0ed9",
            "name": "Consumer Credit - Test API",
            "description": "The Consumer Credit - Test API.postman_collection.json includes some webhook tests to help you understand and develop your solution.",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "New Pre-auth Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/test/preauth-token/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "test",
                    "preauth-token",
                    "{{userId}}"
                  ]
                },
                "description": "Quickly create a preauth token for a preexisting user without having to implement the full Direct Authentication API or complete a full user login."
              },
              "response": []
            },
            {
              "name": "Webhook Test",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//var data = pm.response.json();",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "test",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "test",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/test/webhook/send/{{userId}}?count=1&type=ACCNEW",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "test",
                    "webhook",
                    "send",
                    "{{userId}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    },
                    {
                      "key": "type",
                      "value": "ACCNEW",
                      "description": "Choose from: ACCNEW, IDFAIL, IDSVCOUT, ACCREG, ACCREGFAIL, ACCCLOSED, ACCLOCKED, ACCLOGINFAIL, SCOREREF, REPORTREF, TEST, ERROR"
                    }
                  ]
                },
                "description": "Send a sample webhook request for a registered userid under your host.\n\nChoose a webhook type from: ACCNEW, IDFAIL, IDSVCOUT, ACCREG, ACCREGFAIL, ACCCLOSED, ACCLOCKED, ACCLOGINFAIL, SCOREREF, REPORTREF, TEST, ERROR"
              },
              "response": []
            },
            {
              "name": "Webhook Sink",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//var data = pm.response;",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "test",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "test",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[{\r\n    \"type\": \"ERROR\",\r\n    \"user_id\": \"d9126b53-48ea-40b7-933d-3bc6084f287e\",\r\n    \"time\": \"2020-07-26T05:36:00\",\r\n    \"error_code\": \"SC999\",\r\n    \"error_msg\": \"Test Error\"\r\n}]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/test/webhook/sink",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "test",
                    "webhook",
                    "sink"
                  ],
                  "query": [
                    {
                      "key": "fail",
                      "value": "true",
                      "disabled": true
                    }
                  ]
                },
                "description": "This endpoint simulates sending a webhook.  The current URL responds with success unless the fail parameter is marked.\n\nUse to directly verify that your webhook endpoint is working.  Change the URL to point to your server endpoint.  Update the Basic Authentication username & password accordingly."
              },
              "response": []
            },
            {
              "name": "Webhook Test: Alert",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//var data = pm.response.json();",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "test",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "test",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"alertId\":\"CRT:36641804\",\"alertType\":\"BlockedInquiryAlert\",\"creationDate\":\"2021-01-02-20:32\",\"dataSource\":\"EQUIFAX\",\"dateReported\":\"2021-01-02-20:31\",\"enrollmentId\":\"281380\",\"partnerKey\":\"3e78eae7-a3d0-4b72-9bc3-6493b91e84b6\",\"reportingFrequency\":\"RTINQ\",\"tenantKey\":\"EFX-US\",\"institutionType\":\"Miscellaneous Utilities\",\"institutionName\":\"APPLIED TECHNOLOGY GROUP INC\",\"memberNumber\":\"990UZ07496\",\"inquiryIntent\":\"Real Estate\",\"postedDuringMaintenancePeriod\":\"no\",\"inquiryType\":\"CR\",\"endUserText\":\"Naval Credit Union\",\"institutionAddressLine1\":\"Site Address 1\",\"institutionAddressLine2\":\"St# 2 2nd line\",\"institutionCity\":\"ROANOKE\",\"institutionState\":\"IN\",\"institutionPostalCode\":\"46783\",\"institutionPhoneNumber\":\"\",\"customerReferenceNumber\":\"6B0A07E6-4965-4063-A866-5A96C3E21762\"}"
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/test/webhook/send/{{userId}}?count=1&type=ACCALERT",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "test",
                    "webhook",
                    "send",
                    "{{userId}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    },
                    {
                      "key": "type",
                      "value": "ACCALERT"
                    }
                  ]
                },
                "description": "Send a sample alert request for a registered userid under your host.  The sample alert body included is representative of a real-time alert.  Standard alerts have considerably less information.  The additional alert information is only available using the Direct API endpoint Get Alert Detail at this time."
              },
              "response": []
            }
          ]
        }
        </code></pre>
        </div>
        <p><strong>Direct & User APIs:</strong> Consumer Credit - Getting Started - New User.postman_collection.json</p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - Getting Started - New User.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - Getting Started - New User.postman_collection.json -->
        <pre><code class="language-json" id="new_user_postman_collection">
        {
          "info": {
            "_postman_id": "f65c1f1d-3127-4b15-9ee6-0b85182b16e5",
            "name": "CRS - Getting Started - New User",
            "description": "Consumer API - Getting Started Instructions  \r\nUse the provided Postman Environment in conjunction with this collection of requests.  \r\nThe steps are provided in order to create a new user and retrieve the data.  \r\n\r\nThe Consumer Credit - Getting Started - New User.postman_collection.json will walk you through the Create New User steps in order",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "Step 1: Customer Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c973714d-5902-4cb8-a5f7-a0668ecbfba9",
                    "exec": [
                      "var data = pm.response.json();",
                      "if(data) {",
                      "    if(data.token) pm.environment.set(\"dtoken\",data.token);",
                      "    if(data.refresh) pm.environment.set(\"rdtoken\",data.refresh);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret\": \"{{SECRET}}\",\n    \"apikey\": \"{{API_KEY}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/login",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "login"
                  ]
                },
                "description": "Using your credentials in the request body (\"apikey\" and \"secret\"), the response will contain the token and refresh token.  \r\nThese tokens are required for completing the other requests to Direct API endpoints.\r\n\r\nThis token will be valid for approximately one hour. After the one hour, the refresh token will become valid.\r\n\r\nIf the token expires, use /direct/refresh-token?token={refresh} to get a new token"
              },
              "response": []
            },
            {
              "name": "Step 2: Register New User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e792209a-7d96-47bf-9d1e-34f0a81b407b",
                    "exec": [
                      "var data = pm.response.json();",
                      "if (data) {",
                      "    if (data.token) pm.environment.set(\"paToken\", data.token);",
                      "    if (data.userId) pm.environment.set(\"userId\", data.userId);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"email\":\"{{USER_EMAIL}}\",\"fname\":\"{{USER_FNAME}}\",\"lname\":\"{{USER_LNAME}}\",\"mobile\":\"{{USER_MOBILE}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/user-reg",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "user-reg"
                  ]
                },
                "description": "Creates a new user with unique userId and preauth token.\r\n\r\nWhen a user logs back in, use /direct/preauth-token/{userId} to generate that user a new preauth token and a new userId (refer to Returning User)\r\n\r\nDon't store the token across sessions. Use the userId from the previous session to generate a new userId and a new preauth token."
              },
              "response": []
            },
            {
              "name": "Step 3: Preauth Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ec1bd9d-1e69-4bee-ab8f-e62bfb4936a2",
                    "exec": [
                      "var data = pm.response.json();\r",
                      "if (data) {\r",
                      "    if (data.token) pm.environment.set(\"utoken\", data.token);\r",
                      "    if (data.refresh) pm.environment.set(\"rutoken\", data.refresh);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/preauth-token/{{paToken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "preauth-token",
                    "{{paToken}}"
                  ]
                },
                "description": "This request uses userId (from the response of /direct/user-reg) to generate a User Token.\r\n\r\nThe Preauth Token needed for this request is also generated by /direct/user-reg or /direct/preauth-token"
              },
              "response": []
            },
            {
              "name": "Step 4: User Identity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4844f292-674b-4a57-aeb9-fcc54b7f32c3",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"ssn\":\"{{USER_SSN}}\",\"dob\":\"{{USER_DOB}}\",\"mobile\":\"{{USER_MOBILE}}\",\"street1\":\"{{USER_STREET1}}\",\"street2\":\"{{USER_STREET2}}{{$randomint}}\",\"city\":\"{{USER_CITY}}\",\"state\":\"{{USER_STATE}}\",\"zip\":\"{{USER_ZIP}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/identity",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "identity"
                  ]
                },
                "description": "This endpoint is most useful for checking whether the user's identity needs to be verified.\r\n\r\nIf the response has idpass set to true, then the user's identity is already verified.\r\n\r\nIf idpass is false, then the user's identity needs to be verified.\r\n\r\nThe user's identity can be verified with either:\r\n\r\n/users/get-mobile (phone sms verification)  \r\n/users/get-quiz (an identity quiz)  \r\nThe user's identity must be verified in order to enable the user's device to request the Equifax config data.\r\n\r\nThe data in the Equifax config provides the necessary credentials for making requests to the Equifax API from the consumer's device."
              },
              "response": []
            },
            {
              "name": "Step 5: Phone Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b24aa4f-6416-4267-b007-ec17926c66b0",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"mtoken\",data.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/get-mobile",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "get-mobile"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Step 6: Send Mobile Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e167cb9e-3ed4-4caa-ad53-ec6aa6fdc965",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"mTransactionKey\",data.key);",
                      "pm.environment.set(\"passcode\",data.passcode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/send-code/{{mtoken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "send-code",
                    "{{mtoken}}"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Step 7: Verify Mobile Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7628e0d-6e0a-4d3e-8047-aa5c7be00c78",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"key\":\"{{mTransactionKey}}\",\"code\":\"{{passcode}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/verify-code",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "verify-code"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Step 8: Get EFX Config",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91b6c3dd-27b6-4247-951d-64bdbcd84a3f",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"efx_url\",data.url);",
                      "pm.environment.set(\"efx_api_key\",data.id);",
                      "pm.environment.set(\"efx_assertion\",data.secret);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/efx-config",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "efx-config"
                  ]
                },
                "description": "Use this endpoint to get the Equifax credentials and url\r\n\r\nThese will be needed for the consumer app to send requests to the Equifax API."
              },
              "response": []
            },
            {
              "name": "Step 9: OAUTH Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765b8623-45f4-41ab-9d6a-77cd709b4612",
                    "exec": [
                      "var response = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"efxtoken\", response.access_token);",
                      "tests[\"Status code is 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "scope",
                      "value": "delivery",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "jwt-bearer",
                      "type": "text"
                    },
                    {
                      "key": "api_key",
                      "value": "{{efx_api_key}}",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion",
                      "value": "{{efx_assertion}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{efx_url}}/oauth/token",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "oauth",
                    "token"
                  ]
                },
                "description": "For this path parameter, {efx_url}, use the url found in the response of a call to /users/efx-config.\r\n\r\nA successful request to {efx_url}/oauth/token will return credentials required for other Equifax API calls."
              },
              "response": []
            },
            {
              "name": "[Step 10]: Credit Monitoring",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditMonitoring?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditMonitoring"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 10]: Credit Score Latest",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/latest?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "latest"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 10]: Credit Score History",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/history?historicalLimit=24&format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "historicalLimit",
                      "value": "24"
                    },
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Step 11: Credit Report List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1e02ed8-b430-4b11-9129-b3c55c5177e2",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"reportId\",data[0].id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 12]: Credit Report Summary (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/summary?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "summary"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 12]: Full Credit Report (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 12]: Credit Report (First in list) - PRINT",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/print?access_token={{efxtoken}}",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "print"
                  ],
                  "query": [
                    {
                      "key": "access_token",
                      "value": "{{efxtoken}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {}
        }
        </code></pre>
        </div>

        <p><strong>Direct & User APIs: Consumer Credit - Getting Started - Returning User.postman_collection.json</strong></p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - Getting Started - Returning User.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - Getting Started - Returning User.postman_collection.json -->
        <pre><code class="language-json" id="returning_user_postman_collection">
        {
          "info": {
            "_postman_id": "f65c1f1d-3127-4b15-9ee6-0b85182b16e5",
            "name": "CRS - Getting Started - Returning User",
            "description": "Consumer API - Getting Started Instructions  \r\nUse the provided Postman Environment in conjunction with this collection of requests.  \r\nThe steps are provided in order to handle a returning user and retrieve the data.  \r\n\r\nThe Consumer Credit - Getting Started - Returning User.postman_collection.json will walk you through the Returning User steps in order",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "Step 1: Customer Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c973714d-5902-4cb8-a5f7-a0668ecbfba9",
                    "exec": [
                      "var data = pm.response.json();",
                      "if(data) {",
                      "    if(data.token) pm.environment.set(\"dtoken\",data.token);",
                      "    if(data.refresh) pm.environment.set(\"rdtoken\",data.refresh);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret\": \"{{SECRET}}\",\n    \"apikey\": \"{{API_KEY}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/login",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "login"
                  ]
                },
                "description": "Using your credentials in the request body (\"apikey\" and \"secret\"), the response will contain the token and refresh token.  \r\nThese tokens are required for completing the other requests to Direct API endpoints.\r\n\r\nThis token will be valid for approximately one hour. After the one hour, the refresh token will become valid.\r\n\r\nIf the token expires, use /direct/refresh-token?token={refresh} to get a new token"
              },
              "response": []
            },
            {
              "name": "Step 2: New User Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "75867ce0-7f8d-4531-a7f1-9939d485fb60",
                    "exec": [
                      "var data = pm.response.json();",
                      "if (data) {",
                      "    if (data.token) pm.environment.set(\"paToken\", data.token);",
                      "    if (data.userId) pm.environment.set(\"userId\", data.userId);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/preauth-token/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "preauth-token",
                    "{{userId}}"
                  ]
                },
                "description": "This request uses userId (from the response of /direct/user-reg) to generate a User Token.\r\n\r\nThe Preauth Token needed for this request is also generated by /direct/user-reg or /direct/preauth-token"
              },
              "response": []
            },
            {
              "name": "Step 3: Preauth Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ec1bd9d-1e69-4bee-ab8f-e62bfb4936a2",
                    "exec": [
                      "var data = pm.response.json();\r",
                      "if (data) {\r",
                      "    if (data.token) pm.environment.set(\"utoken\", data.token);\r",
                      "    if (data.refresh) pm.environment.set(\"rutoken\", data.refresh);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/preauth-token/{{paToken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "preauth-token",
                    "{{paToken}}"
                  ]
                },
                "description": "This request uses **userId** (from the response of **/direct/user-reg**) to generate a **User Token**.\r\n\r\n*The Preauth Token needed for this request is also generated by* ***/direct/user-reg*** *or* ***/direct/preauth-token***"
              },
              "response": []
            },
            {
              "name": "Step 4: Get EFX Config",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91b6c3dd-27b6-4247-951d-64bdbcd84a3f",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"efx_url\",data.url);",
                      "pm.environment.set(\"efx_api_key\",data.id);",
                      "pm.environment.set(\"efx_assertion\",data.secret);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/efx-config",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "efx-config"
                  ]
                },
                "description": "Use this endpoint to get the Equifax credentials and url\r\n\r\nThese will be needed for the consumer app to send requests to the Equifax API."
              },
              "response": []
            },
            {
              "name": "Step 5: OAUTH Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "765b8623-45f4-41ab-9d6a-77cd709b4612",
                    "exec": [
                      "var response = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"efxtoken\", response.access_token);",
                      "tests[\"Status code is 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "scope",
                      "value": "delivery",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "jwt-bearer",
                      "type": "text"
                    },
                    {
                      "key": "api_key",
                      "value": "{{efx_api_key}}",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion",
                      "value": "{{efx_assertion}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{efx_url}}/oauth/token",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "oauth",
                    "token"
                  ]
                },
                "description": "For this path parameter, {efx_url}, use the url found in the response of a call to /users/efx-config.\r\n\r\nA successful request to {efx_url}/oauth/token will return credentials required for other Equifax API calls."
              },
              "response": []
            },
            {
              "name": "[Step 6]: Credit Monitoring",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditMonitoring?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditMonitoring"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 6]: Credit Score Latest",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/latest?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "latest"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 6]: Credit Score History",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/history?historicalLimit=24&format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "historicalLimit",
                      "value": "24"
                    },
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Step 7: Credit Report List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1e02ed8-b430-4b11-9129-b3c55c5177e2",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"reportId\",data[0].id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 8]: Credit Report Summary (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/summary?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "summary"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 8]: Full Credit Report (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "[Step 8]: Credit Report (First in list) - PRINT",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/print?access_token={{efxtoken}}",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "print"
                  ],
                  "query": [
                    {
                      "key": "access_token",
                      "value": "{{efxtoken}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {}
        }
        </code></pre>
        </div>

        <p><strong>User APIs: Consumer Credit - User API.postman_collection.json</strong></p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - User API.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - User API.postman_collection.json -->
        <pre><code class="language-json" id="user_api_postman_collection">
        {
          "info": {
            "_postman_id": "78ea84a5-dd24-48c3-872a-2654e894b062",
            "name": "CRS - User API",
            "description": "User API calls must originate from the end-client.\r\n\r\nEquifax end-points are accessible by first using the User API /users/efx-config response data, and then the Equifax /oauth/token call.\r\n\r\nUser API and Equifax API calls are intended to be called from the end-client/user's device.\r\n\r\nThe Consumer Credit - User API.postman_collection.json provides all User-oriented APIs",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "Preauth Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "370399eb-c2d3-4d02-b5e6-28e4cd217059",
                    "exec": [
                      "var data = pm.response.json();\r",
                      "if (data) {\r",
                      "    if (data.token) pm.environment.set(\"utoken\", data.token);\r",
                      "    if (data.refresh) pm.environment.set(\"rutoken\", data.refresh);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/preauth-token/{{paToken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "preauth-token",
                    "{{paToken}}"
                  ]
                },
                "description": "This request uses userId (from the response of /direct/user-reg) to generate a User Token.\r\n\r\nThe Preauth Token needed for this request is also generated by /direct/user-reg or /direct/preauth-token"
              },
              "response": []
            },
            {
              "name": "User Refresh Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "if(data) {",
                      "    if(data.token) pm.environment.set(\"utoken\",data.token);",
                      "    if(data.refresh) pm.environment.set(\"rutoken\",data.refresh);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": "",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/refresh-token?token={{rutoken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "refresh-token"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{rutoken}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "User Identity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"ssn\":\"{{USER_SSN}}\",\"dob\":\"{{USER_DOB}}\",\"mobile\":\"{{USER_MOBILE}}\",\"street1\":\"{{USER_STREET1}}\",\"street2\":\"{{USER_STREET2}}\",\"city\":\"{{USER_CITY}}\",\"state\":\"{{USER_STATE}}\",\"zip\":\"{{USER_ZIP}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/identity",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "identity"
                  ]
                },
                "description": "This endpoint is most useful for checking whether the user's identity needs to be verified.\r\n\r\nIf the response has idpass set to true, then the user's identity is already verified.\r\n\r\nIf idpass is false, then the user's identity needs to be verified.\r\n\r\nThe user's identity can be verified with either:\r\n\r\n/users/get-mobile (phone sms verification)  \r\n/users/get-quiz (an identity quiz)  \r\nThe user's identity must be verified in order to enable the user's device to request the Equifax config data.\r\n\r\nThe data in the Equifax config provides the necessary credentials for making requests to the Equifax API from the consumer's device."
              },
              "response": []
            },
            {
              "name": "Phone Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"mtoken\",data.token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/get-mobile",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "get-mobile"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Send Mobile Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"mTransactionKey\",data.key);",
                      "pm.environment.set(\"passcode\",data.passcode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/send-code/{{mtoken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "send-code",
                    "{{mtoken}}"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Renew Mobile Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"mTransactionKey\",data.key);",
                      "pm.environment.set(\"passcode\",data.passcode);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"key\":\"{{mTransactionKey}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/renew-code",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "renew-code"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Verify Mobile Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"key\":\"{{mTransactionKey}}\",\"code\":\"{{passcode}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/verify-code",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "verify-code"
                  ]
                },
                "description": "Using the Phone Verify, Send Mobile Code, Verify Mobile Code method, the code in the test system passes through, so you can just keep clicking the send on those functions, though you will receive the text as well."
              },
              "response": []
            },
            {
              "name": "Get Identity Quiz",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"qTransactionKey\",data.key);",
                      "pm.environment.set(\"qzId\",data.id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/get-quiz",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "get-quiz"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Verify Identity Quiz",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"key\":\"{{qTransactionKey}}\",\"id\":\"{{qzId}}\",\"answers\": [{\"qid\":1,\"aid\":3},{\"qid\":2,\"aid\":3},{\"qid\":3,\"aid\":3}]}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/verify-quiz",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "verify-quiz"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get EFX Config",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"efx_url\",data.url);",
                      "pm.environment.set(\"efx_api_key\",data.id);",
                      "pm.environment.set(\"efx_assertion\",data.secret);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{utoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/users/efx-config",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "users",
                    "efx-config"
                  ]
                },
                "description": "Use this endpoint to get the Equifax credentials and url\r\n\r\nThese will be needed for the consumer app to send requests to the Equifax API."
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {}
        }
        </code></pre>
        </div>

        <p><strong>Direct APIs: Consumer Credit - Direct API.postman_collection.json</strong></p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - Direct API.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - Direct API.postman_collection.json -->
        <pre><code class="language-json" id="direct_api_postman_collection">
        {
          "info": {
            "_postman_id": "1e3be246-0e2d-472e-8d8b-462f00852568",
            "name": "CRS - Direct API",
            "description": "Direct API calls must originate from your server\r\n\r\nA token from /direct/login is required for all other Direct API end-points. It is a bearer authorization token.\r\n\r\nOnce you have a preauth token, returned from /direct/user-reg or /direct/preauth-token, pass it to the Web UI entry point in the embedded iFrame.\r\n\r\nBe sure to save the ID returned from /direct/user-reg or you won’t be able to reauthorize the user when they return.\r\n\r\n**The preauth token is only valid for 30 seconds\r\n\r\nThe Consumer Credit - Direct API.postman_collection.json will walk you through using the Direct API collection",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "Customer Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ffe89c-fa8a-4891-9231-e69679dc2259",
                    "exec": [
                      "var data = pm.response.json();",
                      "if(data) {",
                      "    if(data.token) pm.environment.set(\"dtoken\",data.token);",
                      "    if(data.refresh) pm.environment.set(\"rdtoken\",data.refresh);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret\": \"{{SECRET}}\",\n    \"apikey\": \"{{API_KEY}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/login",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "login"
                  ]
                },
                "description": "Using your credentials in the request body (\"apikey\" and \"secret\"), the response will contain the token and refresh token.  \r\nThese tokens are required for completing the other requests to Direct API endpoints.\r\n\r\nThis token will be valid for approximately one hour. After the one hour, the refresh token will become valid.\r\n\r\nIf the token expires, use /direct/refresh-token?token={refresh} to get a new token"
              },
              "response": []
            },
            {
              "name": "Customer Refresh Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      "var data = pm.response.json();",
                      "if(data) {",
                      "    if(data.token) pm.environment.set(\"dtoken\",data.token);",
                      "    if(data.refresh) pm.environment.set(\"rdtoken\",data.refresh);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "",
                    "type": "text",
                    "value": "",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/refresh-token?token={{rdtoken}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "refresh-token"
                  ],
                  "query": [
                    {
                      "key": "token",
                      "value": "{{rdtoken}}"
                    }
                  ]
                },
                "description": "Token and refresh tokes are required for completing the other requests to Direct API endpoints.\r\n\r\nThe token will be valid for approximately one hour. After the one hour, the refresh token will become valid.\r\n\r\nWhen the token expires, use /direct/refresh-token?token={refresh} to get a new token"
              },
              "response": []
            },
            {
              "name": "Register New User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "550c9d9e-0719-4eea-9ee8-dbc634154585",
                    "exec": [
                      "var data = pm.response.json();",
                      "if (data) {",
                      "    if (data.token) pm.environment.set(\"paToken\", data.token);",
                      "    if (data.userId) pm.environment.set(\"userId\", data.userId);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"email\":\"{{USER_EMAIL}}\",\"fname\":\"{{USER_FNAME}}\",\"lname\":\"{{USER_LNAME}}\",\"mobile\":\"{{USER_MOBILE}}\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/user-reg",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "user-reg"
                  ]
                },
                "description": "Creates a new user with unique userId and preauth token.\r\n\r\nWhen a user logs back in, use /direct/preauth-token/{userId} to generate that user a new preauth token and a new userId (refer to Returning User)\r\n\r\nDon't store the token across sessions. Use the userId from the previous session to generate a new userId and a new preauth token."
              },
              "response": []
            },
            {
              "name": "New User Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ceca0cf9-2f98-4dce-9c20-ec51795e6aa1",
                    "exec": [
                      "var data = pm.response.json();",
                      "if (data) {",
                      "    if (data.token) pm.environment.set(\"paToken\", data.token);",
                      "    if (data.userId) pm.environment.set(\"userId\", data.userId);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/preauth-token/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "preauth-token",
                    "{{userId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Close User Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/close-account/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "close-account",
                    "{{userId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change User Email",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3d8c071-4aa5-4622-ac58-0a2597c34f87",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"email\": \"test@test.com\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/change-email/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "change-email",
                    "{{userId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change User Phone",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "870bd1c5-5348-49ad-9fc1-7e05469b2ef9",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"mobile\": \"1234567890\"}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/change-mobile/{{userId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "change-mobile",
                    "{{userId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change User Host",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93f5174-f782-4c38-8a95-5dfb4e336521",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/change-host/{{userId}}?host={{HOST_ID}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "change-host",
                    "{{userId}}"
                  ],
                  "query": [
                    {
                      "key": "host",
                      "value": "{{HOST_ID}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update User Refresh Date",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ee5e00-2b02-429f-b7bb-dcfcc9451d13",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/update-refresh/{{userId}}?rmonly=false",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "update-refresh",
                    "{{userId}}"
                  ],
                  "query": [
                    {
                      "key": "rmonly",
                      "value": "false"
                    }
                  ]
                },
                "description": "*Premium Feature - May Require Additional Access"
              },
              "response": []
            },
            {
              "name": "Get Alert Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50689d78-4a1f-4f41-9eb3-698257f83698",
                    "exec": [
                      "var data = pm.response.json();",
                      "if (data) {",
                      "    if (data.token) pm.environment.set(\"paToken\", data.token);",
                      "    if (data.userId) pm.environment.set(\"userId\", data.userId);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{dtoken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}{{BASE_URL}}/direct/efx-alert/{{alertId}}",
                  "protocol": "{{PROTOCOL}}",
                  "host": [
                    "{{HOST}}"
                  ],
                  "port": "{{PORT}}{{BASE_URL}}",
                  "path": [
                    "direct",
                    "efx-alert",
                    "{{alertId}}"
                  ]
                },
                "description": "*Premium Feature - May Require Additional Access"
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {}
        }
        </code></pre>
        </div>

        <p><strong>Equifax APIs: Consumer Credit - EFX API.postman_collection.json</strong></p> <!-- Postman Collections -->
        <p><a href="assets/json/Consumer Credit - EFX API.postman_collection.json" download>Download here</a></p>
        <div class="postman_code" style="max-height: 60vh;overflow: scroll;" onload="doHighlight();">
        <!-- Consumer Credit - EFX API.postman_collection.json -->
        <pre><code class="language-json" id="efx_api_postman_collection">
        {
          "info": {
            "_postman_id": "6a775eeb-7324-447c-9564-157940e7d587",
            "name": "CRS - EFX API",
            "description": "Equifax API calls must originate from the end-client\r\n\r\nEquifax end-points are accessible by first using the User API /users/efx-config response data, and then the Equifax /oauth/token call. As mentioned above, User API and Equifax API calls are intended to be called from the end-client/user's device.\r\n\r\nThe Consumer Credit - EFX API.postman_collection.json has examples for all Equifax APIs",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "OAUTH Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cad6b17b-9322-4759-9809-c06b85ddeca9",
                    "exec": [
                      "var response = JSON.parse(responseBody);",
                      "postman.setEnvironmentVariable(\"efxtoken\", response.access_token);",
                      "tests[\"Status code is 200\"] = responseCode.code === 200;"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "scope",
                      "value": "delivery",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "jwt-bearer",
                      "type": "text"
                    },
                    {
                      "key": "api_key",
                      "value": "{{efx_api_key}}",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion",
                      "value": "{{efx_assertion}}",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{efx_url}}/oauth/token",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "oauth",
                    "token"
                  ]
                },
                "description": "For this path parameter, {efx_url}, use the url found in the response of a call to /users/efx-config.\r\n\r\nA successful request to {efx_url}/oauth/token will return credentials required for other Equifax API calls."
              },
              "response": [
                {
                  "name": "response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "urlencoded",
                      "urlencoded": [
                        {
                          "key": "scope",
                          "value": "delivery",
                          "type": "text"
                        },
                        {
                          "key": "grant_type",
                          "value": "jwt-bearer",
                          "type": "text"
                        },
                        {
                          "key": "api_key",
                          "value": "{{efx_api_key}}",
                          "type": "text"
                        },
                        {
                          "key": "client_assertion",
                          "value": "{{efx_assertion}}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{efx_url}}/oauth/token",
                      "host": [
                        "{{efx_url}}"
                      ],
                      "path": [
                        "oauth",
                        "token"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "javascript",
                  "header": [
                    {
                      "key": "Cache-Control",
                      "value": "no-cache, no-store, max-age=0, must-revalidate, no-store",
                      "name": "Cache-Control",
                      "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                    },
                    {
                      "key": "Content-Encoding",
                      "value": "gzip",
                      "name": "Content-Encoding",
                      "description": "The type of encoding used on the data."
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json;charset=UTF-8",
                      "name": "Content-Type",
                      "description": "The mime type of this content"
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 06 Aug 2015 13:31:36 GMT",
                      "name": "Date",
                      "description": "The date and time that the message was sent"
                    },
                    {
                      "key": "Expires",
                      "value": "0",
                      "name": "Expires",
                      "description": "Gives the date/time after which the response is considered stale"
                    },
                    {
                      "key": "Pragma",
                      "value": "no-cache, no-cache",
                      "name": "Pragma",
                      "description": "Implementation-specific headers that may have various effects anywhere along the request-response chain."
                    },
                    {
                      "key": "Server",
                      "value": "Apache-Coyote/1.1",
                      "name": "Server",
                      "description": "A name for the server"
                    },
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                    },
                    {
                      "key": "Vary",
                      "value": "Accept-Encoding",
                      "name": "Vary",
                      "description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
                    },
                    {
                      "key": "X-Content-Type-Options",
                      "value": "nosniff",
                      "name": "X-Content-Type-Options",
                      "description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
                    },
                    {
                      "key": "X-Frame-Options",
                      "value": "DENY",
                      "name": "X-Frame-Options",
                      "description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
                    },
                    {
                      "key": "X-XSS-Protection",
                      "value": "1; mode=block",
                      "name": "X-XSS-Protection",
                      "description": "Cross-site scripting (XSS) filter"
                    }
                  ],
                  "cookie": [],
                  "body": "{\"access_token\":\"87e22d35-0089-4613-809b-62f248c2c978\",\"token_type\":\"bearer\",\"expires_in\":610,\"scope\":\"read write\"}"
                }
              ]
            },
            {
              "name": "Health Check",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content-type}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditMonitoring/healthcheck?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditMonitoring",
                    "healthcheck"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Monitoring",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditMonitoring?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditMonitoring"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Report List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64ef860f-2992-4d8b-a1f4-86173f8e1793",
                    "exec": [
                      "var data = pm.response.json();",
                      "pm.environment.set(\"reportId\",data[0].id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Report Summary (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/summary?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "summary"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Full Credit Report (First in list)",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Report (First in list) - PRINT",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{efx_url}}/v1/creditReport/{{reportId}}/print?access_token={{efxtoken}}",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditReport",
                    "{{reportId}}",
                    "print"
                  ],
                  "query": [
                    {
                      "key": "access_token",
                      "value": "{{efxtoken}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Score Latest",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/latest?format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "latest"
                  ],
                  "query": [
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Credit Score History",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{efxtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{efx_url}}/v1/creditScore/history?historicalLimit=24&format=json",
                  "host": [
                    "{{efx_url}}"
                  ],
                  "path": [
                    "v1",
                    "creditScore",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "historicalLimit",
                      "value": "24"
                    },
                    {
                      "key": "format",
                      "value": "json"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "protocolProfileBehavior": {}
        }
        </code></pre>
        </div>
        </p>

- name: Overview of Integration Methods
  description: |
        <p>
        With CRS's Consumer Credit B2C offering, you have multiple integration methods to offer Consumer Credit Scores and Credit Monitoring directly as part of your web or mobile experience.
        </p>

        <h2>Overview</h2>
        <p>
        Once you have chosen your <a href="/tag/Which-Integration-Option-is-right-for-you">integration option</a> from among:
        </p>
        <ol>
          <li>Usage of credit reporting on a web page with user authentication managed by CRS: <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Web Widget with Integrated Authentication</a></li>
          <li>Usage of credit reporting on a web page with user authentication managed by you: <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a></li>
          <li>Usage of credit reporting on a custom UI such as a website or mobile app with authentication managed on the website/in the app: <a href="/tag/DevTools-API-Integration-for-Custom-Web-or-Mobile-App">API Integration for Custom Web or Mobile App</a></li>
        </ol>
        then you need to know what integration methods are required to exchange information with CRS.
        </p>
        <p>
        Webhooks pertain to all 3 integration options, but they are optional. 
        Web Messaging only applies to the Widget (integration option 1: <a href="/tag/DevTools-Web-Widget-with-Integrated-Authentication">Web Widget with Integrated Authentication</a> and option 2: <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a>), and is a feature of the widget that customers can use for greater extensibility and insight into the stages that the widget is rendering.
        </p>
        <ul>
          <li><b>Webhooks</b> - Customers should implement Webhooks if they want their users to receive notifications. The customer's webhook endpoint receives the notifications for all their users in nightly batches, and then the customer can send these notifications to their users in whatever fashion they wish.</li>
          <li><b>Web Messaging</b> - the widget has window events that can be listened for using an event listener (<a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank">mozilla doc</a>)</li>
          <ul>
            <li>window.addEventListener('message', receiveMessage, false); : this creates the 'listener' callback function, receiveMessage, which receives notifications for events</li>
            <li>these events have types that can be checked by the customer for triggering whatever javascript code they want when a desired event.data.type value is received.</li>
            <li>there is a function on the event.source object called <b>postMessage()</b>. This function can be used for pre-populating certain fields -- additionally, for integration option 2: <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">Web Integration with Custom Authentication</a>, postMessage({}) can be used for redeeming the preauth token (authenticating a user) as an alternative to passing the preauth token as an iframe URL parameter.</li>
          </ul>
        </ul>

- name: Webhook Integration
  description: |
        <p>
        Webhooks are available to notify you when an alert (or other notifications) comes in so that you can message users in whatever fashion you wish to return to your site.
        </p>
        <p>
        Implementing webhooks is optional and the same for each of the 3 integration options. If the customer wants to send notifications to their users, then they need to set up their webhook, which is where we will send their users' notifications as http requests. For their reference while setting this up, the <a href="/tag/Postman-Collections">Test API Postman Collection</a> has an example demonstrating how their webhook should respond to the requests that CRS sends to it. When their webhook is ready, they send us the webhook URL, username, password -- This info is added to their configuration so that their webhook URL receives all their users' notifications (in production notifications are sent in nightly batches). The <a href="/tag/Postman-Collections">Test API Postman Collection</a> also has a request that will trigger our server to send a webhook to the URL that we have set up for their host configuration so the customer can see that their webhook is behaving correctly. The required behavior for the customer's Webhook is specified below.</p>
        <p>
        To get started, please provide us a URL endpoint to push the webhook to.
        </p>
        <p>
        The webhook should implement SSL and Basic HTTP Authentication, so we need a username and password to the endpoint (15-char or less, it's not super secure and probably doesn't need to be).
        </p>
        <p>
        The basic JSON for the web hook will look like the following (not all fields are present with all requests):
        <div onload="doHighlight();"> 
        <pre><code data-language="json" id="webhook">
        [{
        id: "String - Webhook ID, UUID format",
        type: "String - Webhook Type, see possible values below",
        user_id: "String - CRS user ID, UUID format",
        host_id: "String - The host configuration generating the webhook, UUID format",
        time: "long - Linux epoch, seconds since 1/1/1970",
        error_code: "String - used to report host errors, future use at the moment",
        error_msg: "String - error code details"
        alert_id: "String - id for retrieving additional alert details when available",
        alert_date: "Date - the date/time the alert was reported",
        alert_source: "String - name of the institution reporting when available"
        }]
        </code></pre>
        </div>
        <p>
        When a webhook is received, a response is needed.  Responses with a status other than true will cause the webhook to be resent.
        <div onload="doHighlight();"> 
        <pre><code data-language="json" id="webhook_response">
        [{
        hook_id: "the ID of the webhook",
        status: true | false
        }]
        </code></pre>
        </div>
        <p>
        Webhook Type Values
        <ul>
          <li>ACCNEW    - New Account Created (only sent when created via web, not direct)</li>
          <li>IDFAIL    - Identity Failed (user identification process failed)</li>
          <li>ACCREG    - Account Registered (user passed identification and is registered for data)</li>
          <li>ACCREGFAIL  - Account Registration Failed (user passed identification, but was unable to register for data)</li>
          <li>ACCCLOSED  - Account Closed (only sent when completed via web, not direct)</li>
          <li>ACCLOCKED  - Account Locked Out (account is temporarily locked out)</li>
          <li>ACCLOGINFAIL  - Login Failure (when user authentication fails, web only)</li>
          <li>ACCALERT  - Account Alert (when credit alert notifications, both daily and real-time)</li>
          <li>SCOREREF  - User Score has been refreshed</li>
          <li>REPORTREF  - User Report has been refreshed</li>
          <li>ERROR    - Error (report important issues that may be of interest)</li>
          <li>TEST    - Test (testing notification)</li>
        </ul>
        Additional webhooks may be added without notice
        </p>
        <p>
        </p>
        <p>
        <a href="/tag/Postman-Collections">Consumer Credit - Test API.postman_collection.json</a> includes some webhook tests to help you understand and develop your solution. Once your host is configured, you can use Webhook Test to send a test webhook for a user on demand. See the Test API for additional documentation.
        </p>

- name: Web Messaging Integration
  description: |
        <h4>Web Messaging using POST Messages</h4>
        <p>
        <b>Web Messaging</b> is the term used to describe to how the widget events can be listened for by using a Window listener
        </p>
        <p>
        To interact with the Consumer Credit Widget, you will need to implement a structure using a window event listener.
        </p>
        <p>
        Explanation for most messages is explained within the Javascript code.<br>
        See Tabbed User Interface with Dynamic Consumer Authentication (<a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">direct_sample.html</a>) for a working implementation.
        </p>
        <p>
        You should implement your own user authentication on your servers and return a valid preauth-token to continue. <br>
        The /test/preauth-token can be used in the getData function only functions in the development environment.
        </p>
        <p>
        Essentially, the customer can listen for these events so that when these events occur, the customer can handle some of their desired behavior (e.g. logging, redeeming preauth token, prepopulating fields, etc.).
        </p>
        <p>
        For example, when the event.data.type, 'IDENTITY_STARTED', is listened for/received, the customer can use the postMessage({}) function on the event.source in order to prepopulate some identity fields that the customer may already have stored (should never be used for pre-populating the date of birth or ssn per compliance). From one of the html examples, here is how the identity form fields can be prepopulated after the 'IDENTITY_STARTED' event.data.type is received:
        </p>
        <p>
        Here is a sample javascript code for handling Web Messaging:
        </p>
        <div style="max-height: 60vh;overflow: scroll;display: unset;" onload="doHighlight();"> 
        <pre><code data-language="html" id="web_messaging">
        &lt;script>
        //this just throws in a default ID if one isn't provided on the query string
        const id = document.location.search.length > 0 ? document.location.search.split('&')[0].split('=')[1] : '048741d2-3dcf-4892-8fb0-99930a540cc1';
        console.log("ID: ",id);
        console.log("Loading Message Listener...");

        window.addEventListener("message", receiveMessage, false);

        function receiveMessage(event) {
        if(event && event.source && event.data) {
            // You only need to implement the types that are important/relevant to your use case.
            if(event.data.type === 'AUTH_REQUIRED') {
          //The iframe clident will post this message when a valid preauth token does not exist.
          //Posting a proper message with a preauth token in response allows the client to continue seemlessly.
          //console.log("Auth Required Event Received");
          const es = event.source;
          //this code uses a test endpoint on the server to provide a preauth-token for any user ID without the usual hurdles.
          //This is ONLY for testing and does not exist in the production environment.
          getData("https://efx-dev.stitchcredit.com/api/test/preauth-token/"+id, function() {
              const token = JSON.parse(this.responseText).token;
              console.log("Status: ", this.status, ", token: ", token);
              es.postMessage({type: 'PREAUTH', token: this.status == 200 ? token : null},"*");
          });
            }
            else if(event.data.type === 'REG_STARTED') {
          const es = event.source;
          //only valid for full web implementation, Direct API already creates the customer, so this will never happen in those instances
              // (new Date().valueOf()) - is used to generate a new email ID on the fly for testing purposes
          es.postMessage({type: 'REG', data: {fname:"Gertrude", lname:"Harkenreadeo", email: "test+" + (new Date().valueOf()) + "@test.com"}},"*");
            }
            else if(event.data.type === 'IDENTITY_STARTED') {
          const es = event.source;
          //You could use this function to pre-populate the given fields.  DoB and SSN will never be prepopulated as it violates compliance
              // new Date().valueOf().toString() - generates a unique number for street2 to ensure each run goes through the full identity process, remove to test sequential sign up of the same user
          es.postMessage({type: 'IDENTITY', data: {street1:"305 Linden Av", street2: new Date().valueOf().toString(), city: "Atlanta", state: "GA", zip: "30316", mobile: "0000000000"}},"*");
            }
            else if(event.data.type === 'LOGIN_SUCCESSFUL') {
          console.log("User succesfully logged in");
            }
            else if(event.data.type === 'LOGIN_FAILED') {
          //if you see this message more than a few times in a row, it's likely an issue
          //typically this will only occur for full web implementations, not Direct API
          console.log("User login failed");
            }
            else if(event.data.type === 'USER_ENROLLED') {
          //User successfully completed identity and has been enrolled for consumer data
          console.log("User enrollment successful");
            }
            else if(event.data.type === 'IDENTITY_FAILED') {
          //Identity process failed, user is likely "stuck" as they cannot continue
          console.log("User identity failure");
            }
            else if(event.data.type === 'SERVICE_FAILURE') {
          //Identity process failed most likely due to a service outage, but the user is stuck as they cannot continue without passing identity
          console.log("Identity service failure");
            }
        }

        function getData(req, action) {
        var xhr = new XMLHttpRequest();
            xhr.responesType = 'json';
            xhr.onload = action;
            xhr.open("GET", req);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.send();
        }

        }
        &lt;/script>
        </code></pre>
        </div>
        </p>
        <p>
        Please see <a href="/tag/DevTools-Web-Integration-with-Custom-Authentication">direct_sample.html</a> for a working implementation.
        </p>
        <p>
        Note that the /test/preauth-token call used in the getData function only functions in the development environment.  You should implement your own user authentication on your servers and return a valid preauth-token to continue.
        </p>
        <hr>

- name: APIs
  description: |
        <p>
        With CRS's Consumer Credit API, you can offer Consumer Credit Scores and Credit Monitoring directly as part of your web or mobile experience.
        </p>

        <hr>
        <h2>Overview</h2>
        <p>
        To quickly grasp the token flow and sequence of API calls, download and import the "Getting Started" <a href="/tag/Postman-Collections">Postman Collections</a> from the <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and the Postman environment we provided to you.<br>
        The <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and this documentation contain <a href="/tag/Postman-Collections">Postman Collections</a> for each API.
        </p>
        <p>
        <ul>
          <li><em><strong><a href="/tag/direct-controller">Direct API</a></strong> calls must originate from your server</em> </li>
          <li><em><strong><a href="/tag/user-controller">User API</a></strong> calls must originate from the end-client</em> </li>
          <li><em><strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls must originate from the end-client</em> </li>
        </ul>
        Equifax end-points are accessible by first using the <a href="/tag/user-controller">User API</a> <strong>/users/efx-config</strong> response data, and then the Equifax <strong>/oauth/token</strong> call. As mentioned above, <strong><a href="/tag/user-controller">User API</a></strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device.
        </p>
        <p>
        It is not acceptable to pass any of the data to these calls or responses from these calls to your server. Do not save any data. Short term caching is fine, but long-term storage is not. 
        </p>
        <hr>

        <h2>Access Credentials</h2>
        <p>
        Access Credentials will be sent to you in a Postman Environment upon registration via email. If you have not received the Access Credentials, please contact CRS to obtain these Credentials so that you can setup your API development environment.
        </p>
        <hr>

        <h2>Token Validity Times</h2>
        <p>
        <div style="display: table; clear: both;width: 80%;">
          <div style="float: left; width: 50%;">
            <p>
              <strong>Direct Tokens</strong>
            </p>
            <p>
              <strong>Preauth Tokens</strong>
            </p>
            <p>
              <strong>User Tokens</strong>
            </p>
            <p>
              <strong>Refresh Tokens</strong>
            </p>
            <p>
              <strong>Mobile Verification Tokens</strong>
            </p>
            <p>
              <strong>Customer Tokens</strong>
            </p>
            <p>
              <strong>Action Tokens</strong>
            </p>
          </div>
          <div style="float: left; width: 50%;">
            <p>
              1 hour
            </p>
            <p>
              30 seconds
            </p>
            <p>
              15 minutes
            </p>
            <p>
              Valid after 15 minutes, and expire after 30 minutes
            </p>
            <p>
              15 minutes
            </p>
            <p>
              Valid for 1 day (not used in <a href="/tag/direct-controller">Direct API</a>)
            </p>
            <p>
              Valid for 10 minutes (not used in <a href="/tag/direct-controller">Direct API</a>)
            </p>
          </div>
        </div>
        </p>
        <p>
        Keep in mind, the preauth token is only valid for 30 <strong>seconds</strong>.
        </p>
        <hr>

        <h2>Direct API</h2>

        <p>
        <em><strong>Direct API</strong> calls must originate from your server</em>
        </p>
        <p>
        A token from /direct/login is required for all other <a href="/tag/direct-controller">Direct API</a> end-points. It is a bearer authorization token.
        </p>
        <p>
        Once you have a preauth token, returned from /direct/user-reg or /direct/preauth-token, pass it to the Web UI entry point in the embedded iFrame.
        </p>
        <p>
        Be sure to <strong>save the ID</strong> returned from /direct/user-reg or you won’t be able to reauthorize the user when they return.
        </p>
        <p>
        **<em>The preauth token is only valid for 30 seconds</em>
        </p>
        <hr>

        <h3>Endpoints</h3>
          <p>
          <div style="display: table; clear: both; width: 80%;">
            <div style="float: left; width: 50%;">
              Customer Login
            </div>
            <div style="float: left; width: 50%;">
              /direct/login
            </div>
          </div>
          <div style="display: table; clear: both; width: 80%;">
            <div style="float: left; width: 50%;">
              Register New User
              <br>
              New User Token
              <br>
              Change Email
              <br>
              Change Phone
              <br>
              Close Account
              <br>
              Update Refresh
              <br>
            </div>
            <div style="float: left; width: 50%;">
              /direct/user-reg
              <br>
              /direct/preauth-token
              <br>
              /direct/change-email
              <br>
              /direct/change-phone
              <br>
              /direct/close-account
              <br>
              /direct/update-refresh [PREMIUM FEATURE]
              <br>
            </div>
          </div>
          </p>
          <p>Collection of end-points that should be called from your server.</p>
          <ol>
            <h4><li>Customer Login (POST)</h4>
            <p>/direct/login</p>
              <p>Using your credentials in the request body ("apikey" and "secret"), the response will contain the <em>token</em> and <em>refresh</em> token.<br>
              These tokens are required for completing the other requests to <strong>Direct API</strong> endpoints.<br></p>
              <p>This token will be valid for approximately one hour. After the one hour, the refresh token will become valid. <br></p>
              <p>If the token expires, use <strong>/direct/refresh-token?token={<em>refresh</em>}</strong> to get a new token <br></p>
              <br>
            </li>
            
            <h4><li>CUSTOMER REFRESH TOKEN (GET)</h4>
            <p>/direct/refresh-token</p>
              <p>
              Token and refresh tokes are required for completing the other requests to Direct API endpoints.
              </p>
              <p>
              The token will be valid for approximately one hour. After the one hour, the refresh token will become valid.
              </p>
              <p>
              When the token expires, use /direct/refresh-token?token={refresh} to get a new token
              </p>
            <br>
            </li>
            
            <h4><li>REGISTER NEW USER (POST)</h4>
            <p>/direct/user-reg</p>
            <p>Creates a new user with unique <strong>userId</strong> and <strong>preauth token</strong>.<br></p>
            <p>When a user logs back in, use <strong>/direct/preauth-token/{userId}</strong> to generate that user a new <strong>preauth token</strong> and a new <strong>userId</strong> (refer to <strong>Returning User</strong>)</p>
            <p>Don't store the token across sessions. Use the userId from the previous session to generate a new userId and a new preauth token.</p>
            <br>
            </li>
            
            <h4><li>NEW USER TOKEN (GET)</h4>
            <p>/direct/preauth-token/{userId}</p>
            <br>
            </li>
            
            <h4><li>CLOSE USER ACCOUNT (POST)</h4>
            <p>/direct/close-account/{userId}</p>
            <br>
            </li>
            
            <h4><li>CHANGE USER EMAIL (POST)</h4>
            <p>/direct/change-email/{userId}</p>
            <br>
            </li>
            
            <h4><li>CHANGE USER PHONE (POST)</h4>
            <p>/direct/change-mobile/{userId}</p>
            <br>
            </li>
            
            <h4><li>CHANGE USER HOST (POST)</h4>
            <p>/direct/change-host/{userId}</p>
            <br>
            </li>
            
            <h4><li>UPDATE USER REFRESH DATA (POST)</h4>
            <p>/direct/update-refresh/{userId}</p>
            <p><strong>*Premium Feature - May Require Additional Access</strong></p>
            <br>
            </li>
            
            <h4><li>GET ALERT DETAIL (GET)</h4>
            <p>/direct/efx-alert/{alertId}</p>
            <p><strong>*Premium Feature - May Require Additional Access</strong></p>
            </li>
          </ol>
        <hr>

        <h2>User API</h2>
        <p>
        <em><strong>User API</strong> calls must originate from the end-client</em>
        </p>
        <p>
        Equifax end-points are accessible by first using the User API <strong>/users/efx-config</strong> response data, and then the <a href="/tag/Equifax-API">Equifax</a> <strong>/oauth/token</strong> call.
        </p>
        <p>
        <strong>User API</strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device. 
        </p>
        <h3>Endpoints</h3>
          <p>
          <div style="display: table; clear: both; width:80%">
            <div style="float: left; width: 50%;">
              Preauth Token
              <br>
              User Identity
              <br>
              Phone Verify
              <br>
              Send Mobile Code
              <br>
              Renew Mobile Code
              <br>
              Verify Mobile Code
              <br>
              Get Identity Quiz
              <br>
              Verify Identity Quiz
              <br>
              Get EFX Config
            </div>
            <div style="float: left; width: 50%;">
              /users/preauth-token
              <br>
              /users/identity
              <br>
              /users/get-mobile
              <br>
              /users/send-code
              <br>
              /users/renew-code
              <br>
              /users/verify-code
              <br>
              /users/get-quiz
              <br>
              /users/verify-quiz
              <br>
              /users/efx-config
            </div>
          </div>
          <br/>
          <p><em>Endpoints above are all available to the customer and require a preauth token, returned from /direct/user-reg or /direct/preauth-token</em></p>
          <br/>
          <div style="display: table; clear: both; width:80%">
            <div style="float: left; width: 50%;">
              Start
              <br>
              Initialize
              <br>
              Customer Login
              <br>
              Register New User
              <br>
              Password Recovery
              <br>
              Recovery Token Verify
              <br>
              Password Reset
              <br>
              Action Token
              <br>
              Change Email
              <br>
              Change Phone
              <br>
              Change Password
              <br>
              Change Recovery
              <br>
              Close Account
              <br>
            </div>
            <div style="float: left; width: 50%;">
              /users/start
              <br>
              /users/initialize
              <br>
              /users/login
              <br>
              /users/register
              <br>
              /users/password-recovery
              <br>
              /users/recovery-token
              <br>
              /users/password-reset
              <br>
              /users/action-token
              <br>
              /users/change-email
              <br>
              /users/change-phone
              <br>
              /users/change-password
              <br>
              /users/change-recovery
              <br>
              /users/close-account
              <br>
            </div>
          </div>
          <br/>
          <p><em>Endpoints above are not available for use when Direct API calls are used.
          </em></p>
          <br/>
          </p>
          <ol>
            <h4><li>Preauth Token (get)</h4>
            <p>/users/preauth-token/{paToken}</p>
            <ul>
              <li>
                <p>This request uses <strong>userId</strong> (from the response of <strong>/direct/user-reg</strong>) to generate a <strong>User Token</strong>.</p>
                <p>
                  <em>The Preauth Token needed for this request is also generated by <strong>/direct/user-reg</strong> or <strong>/direct/preauth-token</strong> </em>
                </p>
              </li>
            </ul>
            <br />
            </li>
            
            <h4><li>User Identity (post)</h4>
            <p>/users/identity</p>

            <p>This endpoint is most useful for checking whether the user's identity needs to be verified.</p>
            <p>If the response has <strong>idpass</strong> set to <em>true</em>, then the user's identity is already verified.</p>
            <p>If <strong>idpass</strong> is <em>false</em>, then the user's identity needs to be verified.</p>
            <p>The user's identity can be verified with either:</p>
            <ul>
              <li><strong>/users/get-mobile</strong> (phone sms verification)</li>
              <li><strong>/users/get-quiz</strong> (an identity quiz)</li>
            </ul>
            <p>The user's identity must be verified in order to enable the user's device to request the <strong>Equifax config</strong> data.</p>
            <p>The data in the <strong>Equifax config</strong> provides the necessary credentials for making requests to the Equifax API from the consumer's device.</p>
            <br />
            </li>

            <h4><li>Phone Verify (get)</h4>
            <p>/users/get-mobile</p>
            <br />
            </li>

            <h4><li>Send Mobile Code (post)</h4>
            <p>/users/send-code/{mtoken}</p>
            <br />
            </li>

            <h4><li>Renew Mobile Code (post)</h4>
            <p>/users/renew-code</p>
            <br />
            </li>

            <h4><li>Verify Mobile Code (post)</h4>
            <p>/users/verify-code</p>
            <br />
            </li>

            <h4><li>Get Identity Quiz (get)</h4>
            <p>/users/get-quiz</p>
            <br />
            </li>

            <h4><li>Verify Identity Quiz (post)</h4>
            <p>/users/verify-quiz</p>
            <br />
            </li>

            <h4><li>Get EFX Config (get)</h4>
            <p>/users/efx-config</p>
            <p>Use this endpoint to get the Equifax credentials and url</p>
            <p>These will be needed for the consumer app to send requests to the Equifax API.</p>
            <br />
          </li>
        </ol>
        <hr>

        <h2>Equifax API</h2>
        <p>
        <em><strong>Equifax API</strong> calls must originate from the end-client</em>
        </p>
        <p>
        Equifax end-points are accessible by first using the <a href="/tag/user-controller">User API</a> <strong>/users/efx-config</strong> response data, and then the Equifax <strong>/oauth/token</strong> call. As mentioned above, <strong><a href="/tag/user-controller">User API</a></strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device.
        </p>
        <p>
        <a href="https://sandbox-api.consumer.equifax.com/saas/swagger-ui.html">Equifax Documentation in Swagger</a>
        </p>

        <h3>Endpoints</h3>
          <p>
          <div style="display: table; clear: both;">
            <div style="float: left; width: 50%;">
              Delivery Token
              <br>
              Credit Alerts
              <br>
              Credit Score
              <br>
              Credit Score History
              <br>
              Credit Report List
              <br>
              Credit Report
              <br>
              Credit Report Summary
              <br>
              Credit Report PDF
              <br>
            </div>
            <div style="float: left; width: 50%;">
              /oauth/token
              <br>
              /v1/creditMonitoring
              <br>
              /v1/creditScore
              <br>
              /v1/creditScore/history
              <br>
              /v1/creditReport
              <br>
              /v1/creditReport/{reportId}
              <br>
              /v1/creditReport/{reportId}/summary
              <br>
              /v1/creditReport/{reportId}/print
              <br>
            </div>
          </div>
          </p>

          <p>
          <ol>
            <h4><li>OAUTH Token (post)</h4>
            <p>/{efx_url}/oauth/token</p>
            <p>For this path parameter, <strong>{efx_url}</strong>, use the url found in the response of a call to <strong>/users/efx-config</strong>.</p>
            <p>A successful request to <strong>{efx_url}/oauth/token</strong> will return credentials required for other <strong>Equifax API calls</strong>.</p>
            <br />
            </li>
            
            <h4><li>Health Check (get)</h4>
            <p>/{efx_url}/v1/creditMonitoring/healthcheck</p>
            <br />
            </li>
            
            <h4><li>Credit Monitoring (get)</h4>
            <p>/{efx_url}/v1/creditMonitoring</p>
            <br />
            </li>
            
            <h4><li>CreditReportList (get)</h4>
            <p>/{efx_url}/v1/creditReport</p>
            <br />
            </li>
            
            <h4><li>Credit Report Summary (First in list) (get)</h4>
            <p>/{efx_url}/v1/creditReport/{reportId}/summary</p>
            <br />
            </li>
            
            <h4><li>Full Credit Report (First in list) (get)</h4>
            <p>/{efx_url}/v1/creditReport/{reportId}</p>
            <br />
            </li>
            
            <h4><li>Credit Report (First in list) - PRINT (get)</h4>
            <p>/{efx_url}/v1/creditReport/{reportId}/print</p>
            <br />
            </li>
            
            <h4><li>Credit Score Latest (get)</h4>
            <p>/{efx_url}/v1/creditScore/latest</p>
            <br />
            </li>

            <h4><li>Credit Score History (get)</h4>
            <p>/{efx_url}/v1/creditScore/history</p>
            <br />
            </li>
          </ol>
        </p>
        <hr>

        <h2>Test API</h2>
        <p>
        Collection of end-points for testing webhooks
        </p>

        <h3>Endpoints</h3>
          <p>
          <ol>
            <h4><li>New Pre-auth Token</h4>
            <p>/test/preauth-token/{userId}</p>
            <br>
            </li>

            <h4><li>Webhook Test</h4>
            <p>/test/webhook/send/{userId}</p>
            <br>
            </li>
            
            <h4><li>Webhook Sink</h4>
            <p>/test/webhook/sink</p>
            <br>
            </li>
          </ol>
        </p>
        <hr>
        
        <h2>OpenAPI Definition File</h2>
          <p>
          The OpenAPI definition file can be <a href="https://efx-dev.stitchcredit.com/api/stitch-docs/">downloaded</a> or viewed in <a href="https://efx-dev.stitchcredit.com/api/swagger-ui/index.html?configUrl=/api/stitch-docs/swagger-config#/">Swagger</a>.
          </p>

- name: direct-controller
  x-displayName: Direct API
  description: |
        <p>
        <em><strong>Direct API</strong> calls must originate from your server</em>
        </p>
        <p>
        A token from /direct/login is required for all other <a href="/tag/TODO">Direct API</a> end-points. It is a bearer authorization token.
        </p>
        <p>
        Once you have a preauth token, returned from /direct/user-reg or /direct/preauth-token, pass it to the Web UI entry point in the embedded iFrame.
        </p>
        <p>
        Be sure to <strong>save the ID</strong> returned from /direct/user-reg or you won’t be able to reauthorize the user when they return.
        </p>
        <p>
        **<em>The preauth token is only valid for 30 seconds</em>
        </p>
        <h3>Endpoints</h3>
          <p>
          <div style="display: table; clear: both; width: 80%;">
            <div style="float: left; width: 50%;">
              Customer Login
            </div>
            <div style="float: left; width: 50%;">
              /direct/login
            </div>
          </div>
          <div style="display: table; clear: both; width: 80%;">
            <div style="float: left; width: 50%;">
              Register New User
              <br>
              New User Token
              <br>
              Change Email
              <br>
              Change Phone
              <br>
              Close Account
              <br>
              Update Refresh
              <br>
            </div>
            <div style="float: left; width: 50%;">
              /direct/user-reg
              <br>
              /direct/preauth-token
              <br>
              /direct/change-email
              <br>
              /direct/change-phone
              <br>
              /direct/close-account
              <br>
              /direct/update-refresh [PREMIUM FEATURE]
              <br>
            </div>
          </div>
          </p>
          <p>Collection of end-points that should be called from your server.</p>
          <ol>
            <h4><li>CUSTOMER LOGIN (POST)</h4>
            <p>/direct/login</p>
              <p>Using your credentials in the request body ("apikey" and "secret"), the response will contain the <em>token</em> and <em>refresh</em> token.<br>
              These tokens are required for completing the other requests to <strong>Direct API</strong> endpoints.<br></p>
              <p>This token will be valid for approximately one hour. After the one hour, the refresh token will become valid. <br></p>
              <p>If the token expires, use <strong>/direct/refresh-token?token={<em>refresh</em>}</strong> to get a new token <br></p>
            <br>
            </li>
            <h4><li>CUSTOMER REFRESH TOKEN (GET)</h4>
            <p>/direct/refresh-token</p>
              <p>
              Token and refresh tokes are required for completing the other requests to Direct API endpoints.
              </p>
              <p>
              The token will be valid for approximately one hour. After the one hour, the refresh token will become valid.
              </p>
              <p>
              When the token expires, use /direct/refresh-token?token={refresh} to get a new token
              </p>
            <br>
            </li>
            <h4><li>REGISTER NEW USER (POST)</h4>
            <p>/direct/user-reg</p>
            <p>Creates a new user with unique <strong>userId</strong> and <strong>preauth token</strong>.<br></p>
            <p>When a user logs back in, use <strong>/direct/preauth-token/{userId}</strong> to generate that user a new <strong>preauth token</strong> and a new <strong>userId</strong> (refer to <strong>Returning User</strong>)</p>
            <p>Don't store the token across sessions. Use the userId from the previous session to generate a new userId and a new preauth token.</p>
            <br>
            </li>
            <h4><li>NEW USER TOKEN (GET)</h4>
            <p>/direct/preauth-token/{userId}</p>
            <br>
            </li>
            <h4><li>CLOSE USER ACCOUNT (POST)</h4>
            <p>/direct/close-account/{userId}</p>
            <br>
            </li>
            <h4><li>CHANGE USER EMAIL (POST)</h4>
            <p>/direct/change-email/{userId}</p>
            <br>
            </li>
            <h4><li>CHANGE USER PHONE (POST)</h4>
            <p>/direct/change-mobile/{userId}</p>
            <br>
            </li>
            <h4><li>CHANGE USER HOST (POST)</h4>
            <p>/direct/change-host/{userId}</p>
            <br>
            </li>
            <h4><li>UPDATE USER REFRESH DATA (POST)</h4>
            <p>/direct/update-refresh/{userId}</p>
            <p><strong>*Premium Feature - May Require Additional Access</strong></p>
            <br>
            </li>
            <h4><li>GET ALERT DETAIL (GET)</h4>
            <p>/direct/efx-alert/{alertId}</p>
            <p><strong>*Premium Feature - May Require Additional Access</strong></p>
            <br>
            </li>
          </ol>

- name: customer-controller
  x-displayName: Stitch Customer Management APIs (INTERNAL)
  description: |
      REST APIs for CRS to manage customers

- name: admin-controller
  x-displayName: Stitch Admin APIs (INTERNAL)
  description: |
      REST APIs for CRS to administer the setup

- name: rqueue-rest-controller
  x-displayName: Stitch RQueue APIs (INTERNAL)
  description: |
      REST APIs for CRS 

- name: user-controller
  x-displayName: User API
  description: |
      REST APIs for Users
              <p>
              <em><strong>User API</strong> calls must originate from the end-client</em>
              </p>
              <p>
              Equifax end-points are accessible by first using the User API <strong>/users/efx-config</strong> response data, and then the <a href="/tag/Equifax-API">Equifax</a> <strong>/oauth/token</strong> call.
              </p>
              <p>
              <strong>User API</strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device. 
              </p>
              <h3>Endpoints</h3>
                <p>
                <div style="display: table; clear: both; width:80%">
                  <div style="float: left; width: 50%;">
                    Preauth Token
                    <br>
                    User Identity
                    <br>
                    Phone Verify
                    <br>
                    Send Mobile Code
                    <br>
                    Renew Mobile Code
                    <br>
                    Verify Mobile Code
                    <br>
                    Get Identity Quiz
                    <br>
                    Verify Identity Quiz
                    <br>
                    Get EFX Config
                  </div>
                  <div style="float: left; width: 50%;">
                    /users/preauth-token
                    <br>
                    /users/identity
                    <br>
                    /users/get-mobile
                    <br>
                    /users/send-code
                    <br>
                    /users/renew-code
                    <br>
                    /users/verify-code
                    <br>
                    /users/get-quiz
                    <br>
                    /users/verify-quiz
                    <br>
                    /users/efx-config
                  </div>
                </div>
                <br/>
                <p><em>Endpoints above are all available to the customer and require a preauth token, returned from /direct/user-reg or /direct/preauth-token</em></p>
                <br/>
                <div style="display: table; clear: both; width:80%">
                  <div style="float: left; width: 50%;">
                    Start
                    <br>
                    Initialize
                    <br>
                    Customer Login
                    <br>
                    Register New User
                    <br>
                    Password Recovery
                    <br>
                    Recovery Token Verify
                    <br>
                    Password Reset
                    <br>
                    Action Token
                    <br>
                    Change Email
                    <br>
                    Change Phone
                    <br>
                    Change Password
                    <br>
                    Change Recovery
                    <br>
                    Close Account
                    <br>
                  </div>
                  <div style="float: left; width: 50%;">
                    /users/start
                    <br>
                    /users/initialize
                    <br>
                    /users/login
                    <br>
                    /users/register
                    <br>
                    /users/password-recovery
                    <br>
                    /users/recovery-token
                    <br>
                    /users/password-reset
                    <br>
                    /users/action-token
                    <br>
                    /users/change-email
                    <br>
                    /users/change-phone
                    <br>
                    /users/change-password
                    <br>
                    /users/change-recovery
                    <br>
                    /users/close-account
                    <br>
                  </div>
                </div>
                <br/>
                <p><em>Endpoints above are not available for use when Direct API calls are used.
                </em></p>
                <br/>
                </p>
                <!-- copied from user-api.html generation plus manual cleanup -->
                <ol>
                  <h4><li>Preauth Token (get)</h4>
                  <p>/users/preauth-token/{paToken}</p>
                  <ul>
                    <li>
                      <p>This request uses <strong>userId</strong> (from the response of <strong>/direct/user-reg</strong>) to generate a <strong>User Token</strong>.</p>
                      <p>
                        <em>The Preauth Token needed for this request is also generated by <strong>/direct/user-reg</strong> or <strong>/direct/preauth-token</strong> </em>
                      </p>
                    </li>
                  </ul>
                  </li>
                  <h4><li>User Identity (post)</h4>
                  <p>/users/identity</p>
                  <p>This endpoint is most useful for checking whether the user's identity needs to be verified.</p>
                  <p>If the response has <strong>idpass</strong> set to <em>true</em>, then the user's identity is already verified.</p>
                  <p>If <strong>idpass</strong> is <em>false</em>, then the user's identity needs to be verified.</p>
                  <p>The user's identity can be verified with either:</p>
                  <ul>
                    <li><strong>/users/get-mobile</strong> (phone sms verification)</li>
                    <li><strong>/users/get-quiz</strong> (an identity quiz)</li>
                  </ul>
                  <p>The user's identity must be verified in order to enable the user's device to request the <strong>Equifax config</strong> data.</p>
                  <p>The data in the <strong>Equifax config</strong> provides the necessary credentials for making requests to the Equifax API from the consumer's device.</p>
                  </li>
                  <h4><li>Phone Verify (get)</h4>
                  <p>/users/get-mobile</p>
                  </li>
                  <h4><li>Send Mobile Code (post)</h4>
                  <p>/users/send-code/{mtoken}</p>
                  </li>
                  <h4><li>Renew Mobile Code (post)</h4>
                  <p>/users/renew-code</p>
                  </li>
                  <h4><li>Verify Mobile Code (post)</h4>
                  <p>/users/verify-code</p>
                  </li>
                  <h4><li>Get Identity Quiz (get)</h4>
                  <p>/users/get-quiz</p>
                  </li>
                  <h4><li>Verify Identity Quiz (post)</h4>
                  <p>/users/verify-quiz</p>
                  </li>
                  <h4><li>Get EFX Config (get)</h4>
                  <p>/users/efx-config</p>
                  <p>Use this endpoint to get the Equifax credentials and url</p>
                  <p>These will be needed for the consumer app to send requests to the Equifax API.</p>
                  </li>
                </ol>

- name: test-controller
  x-displayName: Test API
  description: |
          REST APIs for Testing webhooks
              <p>
              Collection of end-points for testing webhooks
              </p>
              <h3>Endpoints</h3>
                <p>
                <ol>
                  <h4><li>New Pre-auth Token</h4>
                  <p>/test/preauth-token/{userId}</p>
                  <br>
                  </li>
                  <h4><li>Webhook Test</h4>
                  <p>/test/webhook/send/{userId}</p>
                  <br>
                  </li>
                  <h4><li>Webhook Sink</h4>
                  <p>/test/webhook/sink</p>
                  <br>
                  </li>
                </ol>
                </p>

- name: Equifax API
  x-displayName: Equifax APIs
  description: |
        REST APIs for Equifax
        <p>
        <em><strong>Equifax API</strong> calls must originate from the end-client</em>
        </p>
        <p>
        Equifax end-points are accessible by first using the <a href="/tag/User-API">User API</a> <strong>/users/efx-config</strong> response data, and then the Equifax <strong>/oauth/token</strong> call. As mentioned above, <strong><a href="/tag/User-API">User API</a></strong> and <strong><a href="/tag/Equifax-API">Equifax API</a></strong> calls are intended to be called from the end-client/user's device.
        </p>
        <p>
        <a href="https://api.consumer.equifax.com/saas/swagger-ui.html">Equifax Documentation in Swagger</a>
        </p>

        <h3 class="section-heading">Endpoints</h3>
          <p>
          <div style="display: table; clear: both;">
            <div style="float: left; width: 50%;">
              Delivery Token
              <br>
              Credit Alerts
              <br>
              Credit Score
              <br>
              Credit Score Latest
              <br>
              Credit Score History
              <br>
              Credit Report List
              <br>
              Credit Report
              <br>
              Credit Report Summary
              <br>
              Credit Report PDF
              <br>
            </div>
            <div style="float: left; width: 50%;">
              /oauth/token
              <br>
              /v1/creditMonitoring
              <br>
              /v1/creditScore
              <br>
              /v1/creditScore/latest
              <br>
              /v1/creditScore/history
              <br>
              /v1/creditReport
              <br>
              /v1/creditReport/{reportId}
              <br>
              /v1/creditReport/{reportId}/summary
              <br>
              /v1/creditReport/{reportId}/print
              <br>
            </div>
          </div>
          </p>

- name: Sandbox
  description: |
        <p>The Sandbox is a free and fully-featured environment for application development and testing. All functionality of the CRS B2C APIs is supported in the Sandbox environment. A variety of scenarios are available to test against, and you can create an unlimited number of test items.</p>
        <p>Sandbox API information has been provided to you as a Postman Collection.</p>
        <h2>Usage</h2>
        <p><a href="/tag/Postman-Collections">Postman Collections</a> for CRS B2C APIs include pre-defined API calls to help you understand and develop your solution. </p>
        <p>To quickly grasp the token flow and sequence of API calls, download and import the "Getting Started" <a href="/tag/Postman-Collections">Postman Collections</a> from the <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and the Postman environment we provided to you.<br>
        The <a href="https://drive.google.com/drive/folders/1VU0awRVnOswE1e9srB_tJ7nBxqUZFN2-?usp=sharing" target="_blank">Google Drive</a> and this documentation contain <a href="/tag/Postman-Collections">Postman Collections</a> for each API.</p>
        <p>
        <ul>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - New User.postman_collection.json</a> will walk you through the Create New User steps in order</li>
        <li>The <a href="/tag/Postman-Collections">Consumer Credit - Getting Started - Returning User.postman_collection.json</a> will walk you through the Returning User steps in order</li>
        </ul>
        </p>
        <hr>
        <h2>Credentials</h2>
        <p>Access Credentials have been sent to you in a Postman Environment upon registration . The Postman Environment is pre-configured to allow you to use the scripts and walk through the Postman Scripts with minimal intervention to aid in understanding the API call structure.</p>
        <hr>
        <h2>Testing</h2>
        <p>In the <strong>test</strong> environment it is important that you use the User Test Identity provided to you verbatim. You may change the email address and phone number <strong>ONLY</strong>.</p>
        <hr>

- name: Security
  description: |
        <p>We regularly audit the security details of our implementation, including our certificates. We ensure that consumers and servers interact with CRS APIs over HTTPS.</p>
        <p>As mentioned in <a href="/tag/APIs">Token Validity Times</a>, authorized user tokens have specific validity times allowing a limited amount f time for users to perform actions before expiring or requiring re-validation.</p>
        <hr>

############### x-tags: what to show, where
x-tagGroups:
  - name: Quickstart
    tags:
      - Getting Started
      # sub-items are embedded in the previous as they are not very large
      # - Before You Start
      # - How it Works
      # - Getting Started
      - Which Integration Option is right for you
      # - Next Steps

  - name: Developer Tools
    summary: 
    tags:
      - Overview of Developer Tools
      - DevTools - Web Widget with Integrated Authentication
      - DevTools - Web Integration with Custom Authentication
      - DevTools - API Integration for Custom Web or Mobile App
      - SDKs
      - Consumer Credit API Setup
      - Postman Collections
      
  - name: Integration Methods
    tags:      
      - Overview of Integration Methods
      - Webhook Integration
      - Web Messaging Integration
      - APIs

  - name: APIs
    tags:  
      - Overview of APIs
      - direct-controller
      - user-controller
      - Equifax API
      - test-controller
      # INTERNAL for Stitch
      # - customer-controller 
      # - admin-controller
      # - rqueue-rest-controller      

  - name: In addition
    tags:      
      - Sandbox
      - Security
